# not tidy
notTidyCats <- data.frame(Panthera = c(Weight = "172 lbs", lifespan = 19),
Lynx = c(Weight = "15 kg", lifespan = 8),
Domestic = c(Weight = "8 pounds", lifespan = 15))
# tidy
tidyCats <- data.frame(Species = "Panthera", Key = "Weight", Value = 172)
tidyCats <- rbind(tidyCats, data.frame(Species = "Panthera", Key = "lifespan", Value = 19))
tidyCats <- rbind(tidyCats, data.frame(Species = "Lynx", Key = "Weight", Value = 34))
tidyCats <- rbind(tidyCats, data.frame(Species = "Lynx", Key = "lifespan", Value = 8))
tidyCats <- rbind(tidyCats, data.frame(Species = "Domestic", Key = "Weight", Value = 8))
tidyCats <- rbind(tidyCats, data.frame(Species = "Domestic", Key = "lifespan", Value = 15))
View(notTidyCats)
View(tidyCats)
View(tidyCats)
View(notTidyCats)
View(tidyCats)
install.packages("tidyverse")
library(tidyverse)
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
install.packages("sqldf")
library(sqldf)
doThisSQL <- "select ORIGIN_STATE_ABR, DEP_DELAY_NEW, DISTANCE from file where ORIGIN_STATE_ABR like '%OR%' "
setwd("~/Desktop/Exercise Files/06_01_sqldf_package")
OR_departures <- read.csv.sql(file = "../global_ontime.csv",
sql = doThisSQL)
View(OR_departures)
doThisSQL <- "select ORIGIN_STATE_ABR, DISTANCE * 1.6 as Kilometers, DISTANCE as Miles from OR_departures"
OR_distance_km <- sqldf(x = doThisSQL)
View(OR_distance_km)
ORIGIN_STATE_ABR <- OR_departures[ , "ORIGIN_STATE_ABR" ]
Kilometers <- OR_departures[ , "DISTANCE" ] * 1.6
Miles <- OR_departures[ , "DISTANCE" ]
OR_distance_km2 <- data.frame( ORIGIN_STATE_ABR, Kilometers, Miles  )
install.packages("sqldf")
install.packages("sqldf")
library(sqldf)
doThisSQL <- "select ORIGIN_STATE_ABR, DEP_DELAY_NEW, DISTANCE from file where ORIGIN_STATE_ABR like '%OR%' "
OR_departures <- read.csv.sql(file = "../global_ontime.csv",
sql = doThisSQL)
View(OR_departures)
doThisSQL <- "select ORIGIN_STATE_ABR, DISTANCE * 1.6 as Kilometers, DISTANCE as Miles from OR_departures"
OR_distance_km <- sqldf(x = doThisSQL)
View(OR_distance_km)
install.packages("rgl")
library(rgl)
example("plot3d")
vignette("plot3d") # oops!
?plot3d
setwd("~/Desktop/Exercise Files/06_02_rgl_package")
mydf <- read.csv("../global_onetime.csv")
mydf <- read.csv("../global_ontime.csv")
xyzToPlot <- data.frame(mydf$DISTANCE, mydf$DEP_DELAY_NEW, mydf$ARR_DELAY_NEW)
# simple 3d plot
plot3d(xyzToPlot,
col = c("red", "green", "blue"))
# simple 3d plot
plot3d(xyzToPlot,
col = c("red", "green", "blue"))
arrow3d(p0 = c(xyzToPlot[760, ]),
p1 = c(xyzToPlot[1000, ]))
bg3d(texture = system.file("textures/sunsleep.png", package = "rgl"), col = "white")
grid3d(c("x", "y+", "z"))
# animation
open3d()
plot3d(xyzToPlot, col = rainbow(1000))
M <- par3d("userMatrix")
if (!rgl.useNULL())
play3d( par3dinterp(time = (0:2)*0.75,
userMatrix = list(M,
rotate3d(M, pi/2, 1, 0, 0),
rotate3d(M, pi/2, 0, 1, 0) ) ),
duration = 10 )
install.packages("rgl")
install.packages("rgl")
library(rgl)
example("plot3d")
vignette("plot3d") # oops!
mydf <- read.csv("../global_ontime.csv")
xyzToPlot <- data.frame(mydf$DISTANCE, mydf$DEP_DELAY_NEW, mydf$ARR_DELAY_NEW)
# simple 3d plot
plot3d(xyzToPlot,
col = c("red", "green", "blue"))
arrow3d(p0 = c(xyzToPlot[760, ]),
p1 = c(xyzToPlot[1000, ]))
bg3d(texture = system.file("textures/sunsleep.png", package = "rgl"), col = "white")
grid3d(c("x", "y+", "z"))
# animation
open3d()
plot3d(xyzToPlot, col = rainbow(1000))
M <- par3d("userMatrix")
if (!rgl.useNULL())
play3d( par3dinterp(time = (0:2)*0.75,
userMatrix = list(M,
rotate3d(M, pi/2, 1, 0, 0),
rotate3d(M, pi/2, 0, 1, 0) ) ),
duration = 10 )
