# not tidy
notTidyCats <- data.frame(Panthera = c(Weight = "172 lbs", lifespan = 19),
Lynx = c(Weight = "15 kg", lifespan = 8),
Domestic = c(Weight = "8 pounds", lifespan = 15))
# tidy
tidyCats <- data.frame(Species = "Panthera", Key = "Weight", Value = 172)
tidyCats <- rbind(tidyCats, data.frame(Species = "Panthera", Key = "lifespan", Value = 19))
tidyCats <- rbind(tidyCats, data.frame(Species = "Lynx", Key = "Weight", Value = 34))
tidyCats <- rbind(tidyCats, data.frame(Species = "Lynx", Key = "lifespan", Value = 8))
tidyCats <- rbind(tidyCats, data.frame(Species = "Domestic", Key = "Weight", Value = 8))
tidyCats <- rbind(tidyCats, data.frame(Species = "Domestic", Key = "lifespan", Value = 15))
View(notTidyCats)
View(tidyCats)
View(tidyCats)
View(notTidyCats)
View(tidyCats)
install.packages("tidyverse")
library(tidyverse)
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
setwd("~/Desktop/Exercise Files/04_02 Install Bioconductor")
# First - source biocLite.r
source("http://bioconductor.org/biocLite.R")
# Second - use biocLite to install packages.
# use biocLite instead of install.packages
biocLite("EBImage")
# Third - use library to load the package (same as Base R)
library("EBImage")
# Then - EBImage is ready to go
anImage <- readImage("https://apod.nasa.gov/apod/image/1801/M31Clouds_DLopez_1500.jpg")
display(anImage)
hist(anImage)
# First - source biocLite.r
source("http://bioconductor.org/biocLite.R")
# Second - use biocLite to install packages.
# use biocLite instead of install.packages
biocLite("EBImage")
# Third - use library to load the package (same as Base R)
library("EBImage")
source("http://bioconductor.org/biocLite.R")
biocLite("ComplexHeatmap")
library(ComplexHeatmap)
bot_stats <- read.csv("../40797218_T_ONTIME.csv")
setwd("~/Desktop/Exercise Files/04_04 Bioconductor comparison")
bot_stats <- read.csv("../global_ontime.csv")
bot_mean <- aggregate(bot_stats,
by = list(bot_stats$ORIGIN_STATE_ABR),
FUN = mean,
na.rm = TRUE
)
bot_mean$DISTANCE <- bot_mean$DISTANCE / 100
rownames(bot_mean) <- levels(bot_mean$Group.1)[bot_mean$Group.1]
Heatmap(bot_mean[ , c("DEP_DELAY_NEW","ARR_DELAY_NEW","DISTANCE")],
col = colorRampPalette(c("green","red"))(10),
cluster_rows = FALSE,
cluster_columns = FALSE,
row_names_gp = gpar(fontsize = 10),
show_heatmap_legend = FALSE
)
source("http://bioconductor.org/biocLite.R")
biocLite("ComplexHeatmap")
library(ComplexHeatmap)
source("http://bioconductor.org/biocLite.R")
biocLite("ComplexHeatmap")
library(ComplexHeatmap)
bot_stats <- read.csv("../global_ontime.csv")
bot_mean <- aggregate(bot_stats,
by = list(bot_stats$ORIGIN_STATE_ABR),
FUN = mean,
na.rm = TRUE
)
bot_mean$DISTANCE <- bot_mean$DISTANCE / 100
rownames(bot_mean) <- levels(bot_mean$Group.1)[bot_mean$Group.1]
?Heatmap
Heatmap(bot_mean[ , c("DEP_DELAY_NEW","ARR_DELAY_NEW","DISTANCE")],
col = colorRampPalette(c("green","red"))(10),
cluster_rows = FALSE,
cluster_columns = FALSE,
row_names_gp = gpar(fontsize = 10),
show_heatmap_legend = FALSE
)
source("http://bioconductor.org/biocLite.R")
biocLite("EBImage")
install.packages("nasadata")
install.packages("ggmap")
library(EBImage)
library(nasadata)
library(ggmap)
nasa_api_key <- "DEMO_KEY" # get your key at https://api.nasa.gov/api.html
myCity <- geocode("Portland, OR")
# invoke various EBImage functions
city_image <- earth_image(nasa_api_key, myCity[["lon"]], myCity[["lat"]], date = "2017-01-01", plot=TRUE)
nasa_api_key <- "S3b6yWwnvvxV7RIGEjrNGNj1|5oqgD800Lzjm0eB"
myCity <- geocode("Portland, OR")
# invoke various EBImage functions
city_image <- earth_image(nasa_api_key, myCity[["lon"]], myCity[["lat"]], date = "2017-01-01", plot=TRUE)
source("http://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
biocLite("EBImage")
install.packages("nasadata")
install.packages("nasadata")
install.packages("ggmap")
library(EBImage)
library(nasadata)
library(ggmap)
nasa_api_key <- "DEMO_KEY" # get your key at https://api.nasa.gov/api.html
nasa_api_key <- "S3b6yWwnvvxV7RIGEjrNGNj1|5oqgD800Lzjm0eB"
myCity <- geocode("Portland, OR")
# invoke various EBImage functions
city_image <- earth_image(nasa_api_key, myCity[["lon"]], myCity[["lat"]], date = "2017-01-01", plot=TRUE)
nasa_api_key <- "DEMO_KEY" # get your key at https://api.nasa.gov/api.html
# invoke various EBImage functions
city_image <- earth_image(nasa_api_key, myCity[["lon"]], myCity[["lat"]], date = "2017-01-01", plot=TRUE)
city_image <- earth_image(nasa_api_key, myCity[["lon"]], myCity[["lat"]], date = "2018-01-01", plot=TRUE)
city_image <- earth_image(nasa_api_key, myCity[["lon"]], myCity[["lat"]], date = "2017-01-01", plot=TRUE)
city_image <- earth_image(nasa_api_key, myCity[["lon"]], myCity[["lat"]], date = "2017-01-01")
myCity[["lon"]]
myCity[["lat"]]
date = "2017-01-01"
earth_image(nasa_api_key, myCity[["lon"]], myCity[["lat"]], date = "2017-01-01", plot=TRUE)
?earth_image
example("earth_image")
?nasadata
city_image <- earth_image(nasa_api_key, myCity[["lon"]], myCity[["lat"]], date = "2017-01-01", meta_only =TRUE)
# invoke various EBImage functions
earth_asset(nasa_api_key, myCity[["lon"]], myCity[["lat"]], date = "2017-01-01")
# invoke various EBImage functions
earth_asset(nasa_api_key, myCity[["lon"]], myCity[["lat"]])
# invoke various EBImage functions
earth_asset(nasa_api_key, myCity[["lon"]], myCity[["lat"]], start_date = "2017-01-01")
# invoke various EBImage functions
earth_asset(nasa_api_key, myCity[["lon"]], myCity[["lat"]], start_date = "2017-01-03")
city_image <- earth_image(nasa_api_key, myCity[["lon"]], myCity[["lat"]], date = "2017-01-01", plot=TRUE)
myCity[["lon"]]
biocLite("EBImage")
source("http://bioconductor.org/biocLite.R")
biocLite("EBImage")
install.packages("nasadata")
install.packages("nasadata")
install.packages("ggmap")
install.packages("ggmap")
library(EBImage)
library(nasadata)
library(ggmap)
nasa_api_key <- "DEMO_KEY" # get your key at https://api.nasa.gov/api.html
# nasa_api_key <- "S3b6yWwnvvxV7RIGEjrNGNj1|5oqgD800Lzjm0eB"
myCity <- geocode("Portland, OR")
# invoke various EBImage functions
earth_asset(nasa_api_key, myCity[["lon"]], myCity[["lat"]], start_date = "2017-01-03")
city_image <- earth_image(nasa_api_key, myCity[["lon"]], myCity[["lat"]], date = "2017-01-01", plot=TRUE)
city_image <- earth_image(nasa_api_key, myCity[["lon"]], myCity[["lat"]], date = "2017-01-03", plot=TRUE)
nasa_api_key <- "S3b6yWwnvvxV7RIGEjrNGNj1|5oqgD800Lzjm0eB"
# invoke various EBImage functions
earth_asset(nasa_api_key, myCity[["lon"]], myCity[["lat"]], start_date = "2017-01-03")
nasa_api_key <- "TkLKtHGaFKZO6ASu0MGnGvju2u5GTqNMnJ24Z4Lt"
# invoke various EBImage functions
earth_asset(nasa_api_key, myCity[["lon"]], myCity[["lat"]], start_date = "2017-01-03")
city_image <- earth_image(nasa_api_key, myCity[["lon"]], myCity[["lat"]], date = "2017-01-03", plot=TRUE)
myCity[["lon"]]
myCity[["lat"]]
city_image <- earth_image(nasa_api_key, myCity[["lon"]], myCity[["lat"]])
# invoke various EBImage functions
earth_asset(nasa_api_key, myCity[["lon"]], myCity[["lat"]], start_date = "2017-01-03")
# load image from nasa
nasa_url <- paste0("http://api.nasa.gov/planetary/earth/imagery?lon=",myCity[["lon"]],
"&lat=", myCity[["lat"]],
"&date=2017-01-01",
"&api_key=", nasa_api_key)
nasa_api_key
nasa_url
tempimage <- download.file(nasa_url)
tempimage <- tempfile()
tempimage <- download.file(nasa_url)
download.file(nasa_url, tempimage)
# load image from nasa
nasa_url <- paste0("https://api.nasa.gov/planetary/earth/imagery?lon=",myCity[["lon"]],
"&lat=", myCity[["lat"]],
"&date=2017-01-01",
"&api_key=", nasa_api_key)
tempimage <- tempfile()
download.file(nasa_url, tempimage)
city_image <- readJPEG(tempimage)
?EBImage
city_image <- readImage(tempimage)
?readImage
city_image <- readImage(nasa_url)
tempimage
getURL(nasa_url)
read.table(nasa_url)
?EBImage
?readImage
setwd("~/Desktop/Exercise Files/04_05 Bioconductor Optimal task")
city_image <- readImage("pdxFromAir.png")
hist_values <- hist(city_image_png) # from EBImage
hist_values <- hist(city_image) # from EBImage
source("http://bioconductor.org/biocLite.R")
biocLite("EBImage")
install.packages("ggmap")
install.packages("ggmap")
library(EBImage)
library(ggmap)
# image from https://www.planet.com
city_image <- readImage("pdxFromAir.png")
hist_values <- hist(city_image) # from EBImage
threshold_here <- quantile(hist_values$density, 0.6)
city_image_thresholded <- city_image_png > threshold_here
city_image_thresholded <- city_image > threshold_here
display(city_image_thresholded) # from EBImage
threshold_here <- quantile(hist_values$density, 0.1)
threshold_here <- quantile(hist_values$density, 0.1)
city_image_thresholded <- city_image > threshold_here
display(city_image_thresholded) # from EBImage
threshold_here <- quantile(hist_values$density, 1)
city_image_thresholded <- city_image > threshold_here
display(city_image_thresholded) # from EBImage
hist_values <- hist(city_image) # from EBImage
threshold_here <- quantile(hist_values$density, .15)
city_image_thresholded <- city_image > threshold_here
display(city_image_thresholded) # from EBImage
threshold_here <- quantile(hist_values$density, .1)
city_image_thresholded <- city_image > threshold_here
threshold_here <- quantile(hist_values$density, .2)
city_image_thresholded <- city_image > threshold_here
display(city_image_thresholded) # from EBImage
threshold_here <- quantile(hist_values$density, .5)
city_image_thresholded <- city_image > threshold_here
display(city_image_thresholded) # from EBImage
fivenum(city_image)
fivenum(city_image_thresholded)
city_image_thresholded <- city_image > .5
display(city_image_thresholded) # from EBImage
building_count <- bwlabel(city_image_thresholded) # from EBImage
max(building_count) # returns the highest labeled item from bwlabel
city_image_thresholded <- city_image > .3
display(city_image_thresholded) # from EBImage
building_count <- bwlabel(city_image_thresholded) # from EBImage
max(building_count) # returns the highest labeled item from bwlabel
city_image_thresholded <- city_image > .6
display(city_image_thresholded) # from EBImage
building_count <- bwlabel(city_image_thresholded) # from EBImage
max(building_count) # returns the highest labeled item from bwlabel
imageOfBuildingThreshold <- .6
city_image_thresholded <- city_image > imageOfBuildingThreshold
display(city_image_thresholded) # from EBImage
building_count <- bwlabel(city_image_thresholded) # from EBImage
max(building_count) # returns the highest labeled item from bwlabel
# image from https://www.planet.com
city_image <- readImage("pdxFromAir.png")
hist_values <- hist(city_image) # from EBImage
# sensitivity setting
imageOfBuildingThreshold <- .6
city_image_thresholded <- city_image > imageOfBuildingThreshold
display(city_image_thresholded) # from EBImage
display(city_image)
display(city_image_thresholded) # from EBImage
display(city_image) # display from EBImage
display(city_image_thresholded) # from EBImage
building_count <- bwlabel(city_image_thresholded) # from EBImage
max(building_count) # returns the highest labeled item from bwlabel
source("http://bioconductor.org/biocLite.R")
biocLite("EBImage")
install.packages("ggmap")
library(EBImage)
library(ggmap)
install.packages("ggmap")
# image from https://www.planet.com
city_image <- readImage("pdxFromAir.png")
hist_values <- hist(city_image) # from EBImage
# sensitivity setting
imageOfBuildingThreshold <- .6
city_image_thresholded <- city_image > imageOfBuildingThreshold
display(city_image) # display from EBImage
display(city_image_thresholded) # from EBImage
building_count <- bwlabel(city_image_thresholded) # from EBImage
max(building_count) # returns the highest labeled item from bwlabel
