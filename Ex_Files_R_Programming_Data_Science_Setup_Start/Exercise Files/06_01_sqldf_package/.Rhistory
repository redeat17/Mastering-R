putTheseSheetsInSQLite <- function(sheetWeNeed) {
aSheetFromExcel <- read_excel(destfile,sheet=sheetWeNeed)
dbWriteTable(conn=mySQLiteDB,name = sheetWeNeed,value=aSheetFromExcel)
}
sapply(importTheseSheets,putTheseSheetsInSQLite)
# Copyright Mark Niemann-Ross, 2017
# Author: Mark Niemann-Ross. mark.niemannross@gmail.com
# Description: lynda.com, Database Clinic, SQLite, Problem 2
list.of.packages <- c("RSQLite","readxl")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(RSQLite)
putSQLiteHere <- "myRsqlite.sqlite"
mySQLiteDB <- dbConnect(RSQLite::SQLite(),putSQLiteHere)
# a function to import zip files, unpack them, then load them into an sqlite db
importDataset <- function(getThisDataSet) {
completePathName <- paste0("http://data.dft.gov.uk/road-accidents-safety-data/",getThisDataSet,".zip")
mytempfile <- tempfile()
download.file(completePathName,mytempfile)
mydatafromcsv <- read.csv(unzip(mytempfile))
dbWriteTable(conn=mySQLiteDB,name = getThisDataSet,value=mydatafromcsv)
file.remove(mytempfile)
}
filestoget <- c("RoadSafetyData_Accidents_2015","RoadSafetyData_Vehicles_2015")
sapply(filestoget,importDataset)
# import the excel file
library(readxl)
url <- "http://data.dft.gov.uk/road-accidents-safety-data/Road-Accident-Safety-Data-Guide.xls"
destfile <- "Road_Accident_Safety_Data_Guide.xls"
download.file(url, destfile)
putTheseSheetsInSQLite <- function(sheetWeNeed) {
aSheetFromExcel <- read_excel(destfile,sheet=sheetWeNeed)
dbWriteTable(conn=mySQLiteDB,name = sheetWeNeed,value=aSheetFromExcel)
}
importTheseSheets <- c("Accident Severity","Vehicle Type")
sapply(importTheseSheets,putTheseSheetsInSQLite)
do_this_sqlite <- "
SELECT avg(Accident_Severity) as Severity,Label
FROM Accidents_2015
LEFT JOIN Vehicles_2015 ON Accidents_2015.Accident_Index = Vehicles_2015.Accident_Index
LEFT JOIN vehicle_type ON Vehicle_Type LIKE vehicle_type.Code
WHERE Label LIKE '%otorcycle%'
GROUP BY Label
ORDER BY Severity"
sqliteResult <- dbSendQuery(mySQLiteDB,do_this_sqlite)
do_this_sqlite <- "
SELECT avg(Accident_Severity) as Severity,label
FROM RoadSafetyData_Accidents_2015
LEFT JOIN RoadSafetyData_Vehicles_2015 ON RoadSafetyData_Accidents_2015.Accident_Index = RoadSafetyData_Vehicles_2015.Accident_Index
LEFT JOIN `Vehicle Type` ON cast(Vehicle_Type as REAL) LIKE `Vehicle Type`.code
WHERE Label LIKE '%otorcycle%'
GROUP BY label
ORDER BY Severity"
sqliteResult <- dbSendQuery(mySQLiteDB,do_this_sqlite)
dbSendQuery(mySQLiteDB,do_this_sqlite)
sqliteResult <- dbGetQuery(mySQLiteDB,do_this_sqlite)
View(sqliteResult)
sqliteResult <- dbSendQuery(mySQLiteDB,do_this_sqlite)
sqliteResult <- dbGetQuery(mySQLiteDB,do_this_sqlite)
sqliteResult <- dbGetQuery(mySQLiteDB,do_this_sqlite)
dbGetQuery(mySQLiteDB,do_this_sqlite)
#!/usr/bin/Rscript
# Copyright Mark Niemann-Ross, 2017
# Author: Mark Niemann-Ross. mark.niemannross@gmail.com
# Description: lynda.com, Database Clinic, SQLite, Problem 2
# import necessary libraries
list.of.packages <- c("readxl")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# SQLite support
library(DBI)
putSQLiteHere <- "myRsqlite.sqlite" # could also be ":memory:"
mySQLiteDB <- dbConnect(RSQLite::SQLite(),putSQLiteHere)
# add support for median
RSQLite::initExtension(db)
# ZIP import --------------------------------------------------------------
# this is a function to import zip files, unpack them, then load them into an sqlite db
importDataset <- function(getThisDataSet) {
completePathName <- paste0("http://data.dft.gov.uk/road-accidents-safety-data/",getThisDataSet,".zip")
mytempfile <- tempfile()
download.file(completePathName,mytempfile)
mydatafromcsv <- read.csv(unzip(mytempfile))
dbWriteTable(conn=mySQLiteDB,name = getThisDataSet,value=mydatafromcsv)
file.remove(mytempfile)
}
filestoget <- c("RoadSafetyData_Accidents_2015","RoadSafetyData_Vehicles_2015")
sapply(filestoget,importDataset)
# Excel import ------------------------------------------------------------
# import the sheets from the excel file
library(readxl)
url <- "http://data.dft.gov.uk/road-accidents-safety-data/Road-Accident-Safety-Data-Guide.xls"
destfile <- "Road_Accident_Safety_Data_Guide.xls"
download.file(url, destfile)
putTheseSheetsInSQLite <- function(sheetWeNeed) {
aSheetFromExcel <- read_excel(destfile,sheet=sheetWeNeed)
dbWriteTable(conn=mySQLiteDB,name = sheetWeNeed,value=aSheetFromExcel)
}
importTheseSheets <- c("Accident Severity","Vehicle Type")
sapply(importTheseSheets,putTheseSheetsInSQLite)
# Calculate ---------------------------------------------------------------
# Calculate the average accident severity for every type of motorcycle
#
do_this_sqlite <- "
SELECT median(Accident_Severity), avg(Accident_Severity) as Severity,label
FROM RoadSafetyData_Accidents_2015
LEFT JOIN RoadSafetyData_Vehicles_2015 ON RoadSafetyData_Accidents_2015.Accident_Index = RoadSafetyData_Vehicles_2015.Accident_Index
LEFT JOIN `Vehicle Type` ON cast(Vehicle_Type as REAL) LIKE `Vehicle Type`.code
WHERE Label LIKE '%otorcycle%'
GROUP BY label
ORDER BY Severity"
dbGetQuery(mySQLiteDB,do_this_sqlite)
dbDisconnect(mySQLiteDB)
#!/usr/bin/Rscript
# Copyright Mark Niemann-Ross, 2017
# Author: Mark Niemann-Ross. mark.niemannross@gmail.com
# Description: lynda.com, Database Clinic, SQLite, Problem 2
# import necessary libraries
list.of.packages <- c("readxl")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# SQLite support
library(DBI)
putSQLiteHere <- "myRsqlite.sqlite" # could also be ":memory:"
mySQLiteDB <- dbConnect(RSQLite::SQLite(),putSQLiteHere)
# add support for median
RSQLite::initExtension(dmySQLiteDB)
# ZIP import --------------------------------------------------------------
# this is a function to import zip files, unpack them, then load them into an sqlite db
importDataset <- function(getThisDataSet) {
completePathName <- paste0("http://data.dft.gov.uk/road-accidents-safety-data/",getThisDataSet,".zip")
mytempfile <- tempfile()
download.file(completePathName,mytempfile)
mydatafromcsv <- read.csv(unzip(mytempfile))
dbWriteTable(conn=mySQLiteDB,name = getThisDataSet,value=mydatafromcsv)
file.remove(mytempfile)
}
filestoget <- c("RoadSafetyData_Accidents_2015","RoadSafetyData_Vehicles_2015")
sapply(filestoget,importDataset)
# Excel import ------------------------------------------------------------
# import the sheets from the excel file
library(readxl)
url <- "http://data.dft.gov.uk/road-accidents-safety-data/Road-Accident-Safety-Data-Guide.xls"
destfile <- "Road_Accident_Safety_Data_Guide.xls"
download.file(url, destfile)
putTheseSheetsInSQLite <- function(sheetWeNeed) {
aSheetFromExcel <- read_excel(destfile,sheet=sheetWeNeed)
dbWriteTable(conn=mySQLiteDB,name = sheetWeNeed,value=aSheetFromExcel)
}
importTheseSheets <- c("Accident Severity","Vehicle Type")
sapply(importTheseSheets,putTheseSheetsInSQLite)
# Calculate ---------------------------------------------------------------
# Calculate the average accident severity for every type of motorcycle
#
do_this_sqlite <- "
SELECT median(Accident_Severity), avg(Accident_Severity) as Severity,label
FROM RoadSafetyData_Accidents_2015
LEFT JOIN RoadSafetyData_Vehicles_2015 ON RoadSafetyData_Accidents_2015.Accident_Index = RoadSafetyData_Vehicles_2015.Accident_Index
LEFT JOIN `Vehicle Type` ON cast(Vehicle_Type as REAL) LIKE `Vehicle Type`.code
WHERE Label LIKE '%otorcycle%'
GROUP BY label
ORDER BY Severity"
dbGetQuery(mySQLiteDB,do_this_sqlite)
dbDisconnect(mySQLiteDB)
#!/usr/bin/Rscript
# Copyright Mark Niemann-Ross, 2017
# Author: Mark Niemann-Ross. mark.niemannross@gmail.com
# Description: lynda.com, Database Clinic, SQLite, Problem 2
# import necessary libraries
list.of.packages <- c("readxl")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# SQLite support
library(DBI)
putSQLiteHere <- "myRsqlite.sqlite" # could also be ":memory:"
mySQLiteDB <- dbConnect(RSQLite::SQLite(),putSQLiteHere)
# add support for median
RSQLite::initExtension(mySQLiteDB)
# ZIP import --------------------------------------------------------------
# this is a function to import zip files, unpack them, then load them into an sqlite db
importDataset <- function(getThisDataSet) {
completePathName <- paste0("http://data.dft.gov.uk/road-accidents-safety-data/",getThisDataSet,".zip")
mytempfile <- tempfile()
download.file(completePathName,mytempfile)
mydatafromcsv <- read.csv(unzip(mytempfile))
dbWriteTable(conn=mySQLiteDB,name = getThisDataSet,value=mydatafromcsv)
file.remove(mytempfile)
}
filestoget <- c("RoadSafetyData_Accidents_2015","RoadSafetyData_Vehicles_2015")
sapply(filestoget,importDataset)
# Excel import ------------------------------------------------------------
# import the sheets from the excel file
library(readxl)
url <- "http://data.dft.gov.uk/road-accidents-safety-data/Road-Accident-Safety-Data-Guide.xls"
destfile <- "Road_Accident_Safety_Data_Guide.xls"
download.file(url, destfile)
putTheseSheetsInSQLite <- function(sheetWeNeed) {
aSheetFromExcel <- read_excel(destfile,sheet=sheetWeNeed)
dbWriteTable(conn=mySQLiteDB,name = sheetWeNeed,value=aSheetFromExcel)
}
importTheseSheets <- c("Accident Severity","Vehicle Type")
sapply(importTheseSheets,putTheseSheetsInSQLite)
# Calculate ---------------------------------------------------------------
# Calculate the average accident severity for every type of motorcycle
#
do_this_sqlite <- "
SELECT median(Accident_Severity), avg(Accident_Severity) as Severity,label
FROM RoadSafetyData_Accidents_2015
LEFT JOIN RoadSafetyData_Vehicles_2015 ON RoadSafetyData_Accidents_2015.Accident_Index = RoadSafetyData_Vehicles_2015.Accident_Index
LEFT JOIN `Vehicle Type` ON cast(Vehicle_Type as REAL) LIKE `Vehicle Type`.code
WHERE Label LIKE '%otorcycle%'
GROUP BY label
ORDER BY Severity"
dbGetQuery(mySQLiteDB,do_this_sqlite)
dbDisconnect(mySQLiteDB)
?create
??create
?devtools
install.packages(devtools)
install.packages("devtools")
?create
??create
library(devtools)
?create
lots.of.letters <- data.frame(LETTERS,letters,position=1:length(letters))
View(lots.of.letters)
lots.of.letters[3,]
lots.of.letters[,3]
lots.of.letters[,2]
lots.of.letters["letters"]
lots.of.letters[3:8,2:3]
lots.of.letters[lots.of.letters$position < 10,"letters"]
lots.of.letters[LETTERS=="R",]
lots.of.letters[LETTERS=="R" | LETTERS=="T",]
http://adv-r.had.co.nz/Subsetting.html
i.am.a.vector <- c("twas","brillig","and","the","slithey","toves")
i.am.a.matrix <- matrix(i.am.a.vector,nrow=2,ncol=3)
View(i.am.a.matrix)
i.am.a.longer.vector <- c(i.am.a.vector,c("did","gyre","and","gimble","in","wabe"))
i.am.a.longer.vector
i.am.an.array <- array(i.am.a.longer.vector,c(2,3,2))
i.am.an.array
i.am.an.array[2,3,2]
i.am.an.array
toupper
toupper(i.am.an.array[2,3,2])
i.am.an.array[2,3,2] <- toupper(i.am.an.array[2,3,2])
i.am.an.array
i.am.an.array[2,,2]
i.am.an.array[2,3,3]
i.am.an.array
my.row.names <- c("up","down")
my.column.names <- c("left","middle","right")
my.table.names <- c("behind","in front")
dimnames(i.am.an.array) <- list(my.row.names,my.column.names,my.table.names)
i.am.an.array
i.am.an.array["down","middle","in front"]
help.search(keyword = "character", package = "base")
setwd("~/OneDrive/R_DataSci - setup and start/Example Files/06_02_sqldf_package")
# read.csv.sql ------------------------------------------------------------
# filter and import a csv file. Useful for files larger than available memory
OR_departures <- read.csv.sql(file = "../40797218_T_ONTIME.csv",
sql = "select DEP_DELAY_NEW, DISTANCE from file where ORIGIN_STATE_ABR = OR")
install.packages("sqldf")
library(sqldf)
# read.csv.sql ------------------------------------------------------------
# filter and import a csv file. Useful for files larger than available memory
OR_departures <- read.csv.sql(file = "../40797218_T_ONTIME.csv",
sql = "select DEP_DELAY_NEW, DISTANCE from file where ORIGIN_STATE_ABR = OR")
# read.csv.sql ------------------------------------------------------------
# filter and import a csv file. Useful for files larger than available memory
OR_departures <- read.csv.sql(file = "../40797218_T_ONTIME.csv",
sql = "select DEP_DELAY_NEW, DISTANCE from file")
View(OR_departures)
# read.csv.sql ------------------------------------------------------------
# filter and import a csv file. Useful for files larger than available memory
OR_departures <- read.csv.sql(file = "../40797218_T_ONTIME.csv",
sql = "select DEP_DELAY_NEW, DISTANCE from file where ORIGIN_STATE_ABR = 'OR'")
View(OR_departures)
# read.csv.sql ------------------------------------------------------------
# filter and import a csv file. Useful for files larger than available memory
OR_departures <- read.csv.sql(file = "../40797218_T_ONTIME.csv",
sql = "select DEP_DELAY_NEW, DISTANCE from file where ORIGIN_STATE_ABR = 'AK'")
# read.csv.sql ------------------------------------------------------------
# filter and import a csv file. Useful for files larger than available memory
OR_departures <- read.csv.sql(file = "../40797218_T_ONTIME.csv",
sql = "select DEP_DELAY_NEW, DISTANCE from file where ORIGIN_STATE_ABR = 'AK'")
# read.csv.sql ------------------------------------------------------------
# filter and import a csv file. Useful for files larger than available memory
OR_departures <- read.csv.sql(file = "../40797218_T_ONTIME.csv",
sql = 'select DEP_DELAY_NEW, DISTANCE from file where ORIGIN_STATE_ABR = "AK"')
# read.csv.sql ------------------------------------------------------------
# filter and import a csv file. Useful for files larger than available memory
OR_departures <- read.csv.sql(file = "../40797218_T_ONTIME.csv",
sql = `select DEP_DELAY_NEW, DISTANCE from file where ORIGIN_STATE_ABR = 'AK'``)
''
``
# read.csv.sql ------------------------------------------------------------
# filter and import a csv file. Useful for files larger than available memory
OR_departures <- read.csv.sql(file = "../40797218_T_ONTIME.csv",
sql = `select DEP_DELAY_NEW, DISTANCE from file where ORIGIN_STATE_ABR = 'AK'`)
# read.csv.sql ------------------------------------------------------------
# filter and import a csv file. Useful for files larger than available memory
OR_departures <- read.csv.sql(file = "../40797218_T_ONTIME.csv",
sql = "select DEP_DELAY_NEW, DISTANCE from file where ORIGIN_STATE_ABR = 'AK'")
# read.csv.sql ------------------------------------------------------------
# filter and import a csv file. Useful for files larger than available memory
OR_departures <- read.csv.sql(file = "../40797218_T_ONTIME.csv",
sql = "select ORIGIN_STATE_ABR, DEP_DELAY_NEW, DISTANCE from file where ORIGIN_STATE_ABR = 'AK'")
View(OR_departures)
# read.csv.sql ------------------------------------------------------------
# filter and import a csv file. Useful for files larger than available memory
OR_departures <- read.csv.sql(file = "../40797218_T_ONTIME.csv",
sql = "select ORIGIN_STATE_ABR, DEP_DELAY_NEW, DISTANCE from file")
# read.csv.sql ------------------------------------------------------------
# filter and import a csv file. Useful for files larger than available memory
OR_departures <- read.csv.sql(file = "../40797218_T_ONTIME.csv",
sql = "select ORIGIN_STATE_ABR, DEP_DELAY_NEW, DISTANCE from file where ORIGIN_STATE_ABR like 'OR' ")
# read.csv.sql ------------------------------------------------------------
# filter and import a csv file. Useful for files larger than available memory
OR_departures <- read.csv.sql(file = "../40797218_T_ONTIME.csv",
sql = "select ORIGIN_STATE_ABR, DEP_DELAY_NEW, DISTANCE from file where ORIGIN_STATE_ABR like 'AK' ")
# read.csv.sql ------------------------------------------------------------
# filter and import a csv file. Useful for files larger than available memory
OR_departures <- read.csv.sql(file = "../40797218_T_ONTIME.csv",
sql = "select ORIGIN_STATE_ABR, DEP_DELAY_NEW, DISTANCE from file where ORIGIN_STATE_ABR = 'AK' ")
View(OR_departures)
# read.csv.sql ------------------------------------------------------------
# filter and import a csv file. Useful for files larger than available memory
OR_departures <- read.csv.sql(file = "../40797218_T_ONTIME.csv",
sql = "select ORIGIN_STATE_ABR, DEP_DELAY_NEW, DISTANCE from file  ")
# read.csv.sql ------------------------------------------------------------
# filter and import a csv file. Useful for files larger than available memory
OR_departures <- read.csv.sql(file = "../40797218_T_ONTIME.csv",
sql = "select ORIGIN_STATE_ABR, DEP_DELAY_NEW, DISTANCE from file where DISTANCE > 500 ")
View(OR_departures)
sql = "select ORIGIN_STATE_ABR, DEP_DELAY_NEW, DISTANCE from file where ORIGIN_STATE_ABR = '"OR"' " ")
View(OR_departures)
# read.csv.sql ------------------------------------------------------------
# filter and import a csv file. Useful for files larger than available memory
OR_departures <- read.csv.sql(file = "../40797218_T_ONTIME.csv",
sql = "select ORIGIN_STATE_ABR, DEP_DELAY_NEW, DISTANCE from file where ORIGIN_STATE_ABR = '"OR"' ")
# read.csv.sql ------------------------------------------------------------
# filter and import a csv file. Useful for files larger than available memory
OR_departures <- read.csv.sql(file = "../40797218_T_ONTIME.csv",
sql = "select ORIGIN_STATE_ABR, DEP_DELAY_NEW, DISTANCE from file where ORIGIN_STATE_ABR IN 'OR' ")
# read.csv.sql ------------------------------------------------------------
# filter and import a csv file. Useful for files larger than available memory
OR_departures <- read.csv.sql(file = "../40797218_T_ONTIME.csv",
sql = "select ORIGIN_STATE_ABR, DEP_DELAY_NEW, DISTANCE from file where 'OR' IN ORIGIN_STATE_ABR ")
# read.csv.sql ------------------------------------------------------------
# filter and import a csv file. Useful for files larger than available memory
OR_departures <- read.csv.sql(file = "../40797218_T_ONTIME.csv",
sql = "select ORIGIN_STATE_ABR, DEP_DELAY_NEW, DISTANCE from file where ORIGIN_STATE_ABR in 'OR' ")
# read.csv.sql ------------------------------------------------------------
# filter and import a csv file. Useful for files larger than available memory
OR_departures <- read.csv.sql(file = "../40797218_T_ONTIME.csv",
sql = "select ORIGIN_STATE_ABR, DEP_DELAY_NEW, DISTANCE from file where ORIGIN_STATE_ABR like 'OR' ")
# read.csv.sql ------------------------------------------------------------
# filter and import a csv file. Useful for files larger than available memory
OR_departures <- read.csv.sql(file = "../40797218_T_ONTIME.csv",
sql = "select ORIGIN_STATE_ABR, DEP_DELAY_NEW, DISTANCE from file where ORIGIN_STATE_ABR like '%OR%' ")
View(OR_departures)
doThisSQL <- "select ORIGIN_STATE_ABR, DEP_DELAY_NEW, DISTANCE from file where ORIGIN_STATE_ABR like '%OR%' "
OR_departures <- read.csv.sql(file = "../40797218_T_ONTIME.csv",
sql = doThisSQL)
OR_departures <- read.csv.sql(file = "../40797218_T_ONTIME.csv",
sql = doThisSQL,
row.names = 1)
View(OR_departures)
OR_departures <- read.csv.sql(file = "../40797218_T_ONTIME.csv",
sql = doThisSQL,
row.names = 2)
View(OR_departures)
OR_departures <- read.csv.sql(file = "../40797218_T_ONTIME.csv",
row.names = 1,
sql = doThisSQL
)
View(OR_departures)
OR_departures <- read.csv.sql(file = "../40797218_T_ONTIME.csv",
row.names = 3,
sql = doThisSQL
)
View(OR_departures)
View(OR_departures)
doThisSQL <- "select ORIGIN_STATE_ABR, DEP_DELAY_NEW, DISTANCE from file where ORIGIN_STATE_ABR like '%OR%' "
OR_departures <- read.csv.sql(file = "../40797218_T_ONTIME.csv",
row.names = 1,
sql = doThisSQL
)
View(OR_departures)
OR_departures <- read.csv.sql(file = "../40797218_T_ONTIME.csv",
header = TRUE,
sql = doThisSQL
)
View(OR_departures)
OR_departures <- read.csv.sql(file = "../40797218_T_ONTIME.csv",
sql = doThisSQL)
View(OR_departures)
OR_departures <- read.csv.sql(file = "../40797218_T_ONTIME.csv",
header = FALSE,
sql = doThisSQL
)
View(OR_departures)
doThisSQL <- "select ORIGIN_STATE_ABR, DEP_DELAY_NEW, DISTANCE from file where ORIGIN_STATE_ABR like '%OR%' "
OR_departures <- read.csv.sql(file = "../40797218_T_ONTIME.csv",
header = FALSE,
sql = doThisSQL
)
OR_departures <- read.csv.sql(file = "../40797218_T_ONTIME.csv",
sql = doThisSQL
)
View(OR_departures)
View(OR_departures)
OR_departures <- read.csv.sql(file = "../40797218_T_ONTIME.csv",
filter = 'sed s/\"//g '
sql = doThisSQL
)
filter = sed s/\"//g
OR_departures <- read.csv.sql(file = "../40797218_T_ONTIME.csv",
filter = 'sed s/\"//g ',
sql = doThisSQL
)
OR_departures <- read.csv.sql(file = "../40797218_T_ONTIME.csv",
filter = `sed s/\"//g `,
sql = doThisSQL
)
OR_departures <- read.csv.sql(file = "../40797218_T_ONTIME.csv",
filter = 'sed s/\"//g ',
sql = doThisSQL
)
OR_departures <- read.csv.sql(file = "../40797218_T_ONTIME.csv",
filter = "sed s/\"//g ",
sql = doThisSQL
)
doThisFilter <- "sed s/\"//g "
OR_departures <- read.csv.sql(file = "../40797218_T_ONTIME.csv",
filter = doThisFilter,
sql = doThisSQL
)
OR_departures <- read.csv.sql(file = "../40797218_T_ONTIME.csv",
sql = doThisSQL
)
doThisFilter <- 'sed s/\"//g'
OR_departures <- read.csv.sql(file = "../40797218_T_ONTIME.csv",
filter = doThisFilter,
sql = doThisSQL
)
doThisFilter <- 'tr \" _'
OR_departures <- read.csv.sql(file = "../40797218_T_ONTIME.csv",
filter = doThisFilter,
sql = doThisSQL
)
doThisFilter <- 'sed s/\"//g'
OR_departures <- read.csv.sql(file = "../40797218_T_ONTIME.csv",
nrows = 2000,
sql = doThisSQL)
doThisSQL <- "select ORIGIN_STATE_ABR, DEP_DELAY_NEW, DISTANCE from file where ORIGIN_STATE_ABR like '%OR%' "
OR_departures <- read.csv.sql(file = "../40797218_T_ONTIME.csv",
nrows = 2000,
sql = doThisSQL)
doThisSQL <- "select ORIGIN_STATE_ABR, DEP_DELAY_NEW, DISTANCE from file where ORIGIN_STATE_ABR like '%OR%' "
OR_departures <- read.csv.sql(file = "../40797218_T_ONTIME.csv",
nrows = 2000,
sql = doThisSQL)
doThisSQL <- "select ORIGIN_STATE_ABR, DISTANCE * 1.6 as Kilometers from OR_departures"
OR_distance_km <- sqldf(x = doThisSQL)
View(OR_distance_km)
doThisSQL <- "select ORIGIN_STATE_ABR, DISTANCE * 1.6 as Kilometers, DISTANCE from OR_departures"
OR_distance_km <- sqldf(x = doThisSQL)
View(OR_distance_km)
doThisSQL <- "select ORIGIN_STATE_ABR, DISTANCE * 1.6 as Kilometers, DISTANCE as Miles from OR_departures"
OR_distance_km <- sqldf(x = doThisSQL)
View(OR_distance_km)
OR_distance_km <- sqldf(x = doThisSQL,
row.names = TRUE)
View(OR_distance_km)
variableSelectors <- c("ORIGIN_STATE_ABR",
Kilometers = DISTANCE * 1.6,
miles = DISTANCE)
OR_distance_km2 <- OR_departures[ , variableSelectors ]
variableSelectors <- c("ORIGIN_STATE_ABR",
Kilometers = DISTANCE * 1.6,
miles = DISTANCE)
variableSelectors <- c("ORIGIN_STATE_ABR",
Kilometers = "DISTANCE" * 1.6,
miles = "DISTANCE")
OR_distance_km2 <- OR_departures[ , c("ORIGIN_STATE_ABR",
Kilometers = "DISTANCE" * 1.6,
miles = "DISTANCE") ]
OR_distance_km2$ORIGIN_STATE_ABR <- OR_departures[ , "ORIGIN_STATE_ABR" ]
OR_distance_km2$ORIGIN_STATE_ABR <- OR_departures[ , "ORIGIN_STATE_ABR" ]
OR_distance_km2 <- OR_departures[ , "ORIGIN_STATE_ABR" ]
OR_distance_km2 <- as.data.frame(OR_departures[ , "ORIGIN_STATE_ABR" ])
View(OR_distance_km2)
OR_distance_km2 <- as.data.frame(ORIGIN_STATE_ABR = OR_departures[ , "ORIGIN_STATE_ABR" ])
OR_distance_km2 <- data.frame(OR_departures[ , "ORIGIN_STATE_ABR" ], )
OR_distance_km2 <- data.frame(OR_departures[ , "ORIGIN_STATE_ABR" ] )
View(OR_distance_km2)
stateABR <- OR_departures[ , "ORIGIN_STATE_ABR" ]
Kilometers <- OR_departures[ , "DISTANCE" * 1.6 ]
Kilometers <- OR_departures[ , "DISTANCE" ] * 1.6
Miles <- OR_departures[ , "DISTANCE" ]
OR_distance_km2 <- data.frame( ORIGIN_STATE_ABR, Kilometers, Miles  )
ORIGIN_STATE_ABR <- OR_departures[ , "ORIGIN_STATE_ABR" ]
Kilometers <- OR_departures[ , "DISTANCE" ] * 1.6
Miles <- OR_departures[ , "DISTANCE" ]
OR_distance_km2 <- data.frame( ORIGIN_STATE_ABR, Kilometers, Miles  )
View(OR_distance_km2)
view("../40797218_T_ONTIME.csv")
View("../40797218_T_ONTIME.csv")
`40797218_T_ONTIME` <- read.csv("~/OneDrive/R_DataSci - setup and start/Example Files/40797218_T_ONTIME.csv")
View(`40797218_T_ONTIME`)
