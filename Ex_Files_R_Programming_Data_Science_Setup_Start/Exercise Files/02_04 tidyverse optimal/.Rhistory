# not tidy
notTidyCats <- data.frame(Panthera = c(Weight = "172 lbs", lifespan = 19),
Lynx = c(Weight = "15 kg", lifespan = 8),
Domestic = c(Weight = "8 pounds", lifespan = 15))
# tidy
tidyCats <- data.frame(Species = "Panthera", Key = "Weight", Value = 172)
tidyCats <- rbind(tidyCats, data.frame(Species = "Panthera", Key = "lifespan", Value = 19))
tidyCats <- rbind(tidyCats, data.frame(Species = "Lynx", Key = "Weight", Value = 34))
tidyCats <- rbind(tidyCats, data.frame(Species = "Lynx", Key = "lifespan", Value = 8))
tidyCats <- rbind(tidyCats, data.frame(Species = "Domestic", Key = "Weight", Value = 8))
tidyCats <- rbind(tidyCats, data.frame(Species = "Domestic", Key = "lifespan", Value = 15))
View(notTidyCats)
View(tidyCats)
View(tidyCats)
View(notTidyCats)
View(tidyCats)
install.packages("tidyverse")
library(tidyverse)
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
read_csv("../global_ontime.csv") %>%
mutate(DISTANCE = DISTANCE / 100) %>%
gather(key = stat,
value = value,
-ORIGIN_STATE_ABR,
na.rm = TRUE) %>%
mutate(value = as.numeric(value)) %>%
group_by(ORIGIN_STATE_ABR, stat) %>%
summarise(mean_value = mean(value, na.rm = TRUE)) %>%
ungroup() %>%
mutate(ORIGIN_STATE_ABR = fct_rev(ORIGIN_STATE_ABR)) %>%
ggplot(aes(x = stat, y = ORIGIN_STATE_ABR)) +
geom_tile(aes(fill = mean_value)) +
scale_fill_continuous(low = "green", high = "red")
setwd("~/Desktop/Exercise Files/02_04 tidyverse comparison")
read_csv("../global_ontime.csv") %>%
mutate(DISTANCE = DISTANCE / 100) %>%
gather(key = stat,
value = value,
-ORIGIN_STATE_ABR,
na.rm = TRUE) %>%
mutate(value = as.numeric(value)) %>%
group_by(ORIGIN_STATE_ABR, stat) %>%
summarise(mean_value = mean(value, na.rm = TRUE)) %>%
ungroup() %>%
mutate(ORIGIN_STATE_ABR = fct_rev(ORIGIN_STATE_ABR)) %>%
ggplot(aes(x = stat, y = ORIGIN_STATE_ABR)) +
geom_tile(aes(fill = mean_value)) +
scale_fill_continuous(low = "green", high = "red")
remove.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
read_csv("../global_ontime.csv") %>%
mutate(DISTANCE = DISTANCE / 100) %>%
gather(key = stat,
value = value,
-ORIGIN_STATE_ABR,
na.rm = TRUE) %>%
mutate(value = as.numeric(value)) %>%
group_by(ORIGIN_STATE_ABR, stat) %>%
summarise(mean_value = mean(value, na.rm = TRUE)) %>%
ungroup() %>%
mutate(ORIGIN_STATE_ABR = fct_rev(ORIGIN_STATE_ABR)) %>%
ggplot(aes(x = stat, y = ORIGIN_STATE_ABR)) +
geom_tile(aes(fill = mean_value)) +
scale_fill_continuous(low = "green", high = "red")
libpaths()
.libPaths()
install.packages("digest")
install.packages("digest")
setwd("~/Downloads")
install.packages("digest_0.6.15.tar.gz")
install.packages("digest_0.6.15.tar.gz", repos = NULL, type = "source")
read_csv("../global_ontime.csv") %>%
mutate(DISTANCE = DISTANCE / 100) %>%
gather(key = stat,
value = value,
-ORIGIN_STATE_ABR,
na.rm = TRUE) %>%
mutate(value = as.numeric(value)) %>%
group_by(ORIGIN_STATE_ABR, stat) %>%
summarise(mean_value = mean(value, na.rm = TRUE)) %>%
ungroup() %>%
mutate(ORIGIN_STATE_ABR = fct_rev(ORIGIN_STATE_ABR)) %>%
ggplot(aes(x = stat, y = ORIGIN_STATE_ABR)) +
geom_tile(aes(fill = mean_value)) +
scale_fill_continuous(low = "green", high = "red")
setwd("~/Desktop/Exercise Files/02_04 tidyverse comparison")
read_csv("../global_ontime.csv") %>%
mutate(DISTANCE = DISTANCE / 100) %>%
gather(key = stat,
value = value,
-ORIGIN_STATE_ABR,
na.rm = TRUE) %>%
mutate(value = as.numeric(value)) %>%
group_by(ORIGIN_STATE_ABR, stat) %>%
summarise(mean_value = mean(value, na.rm = TRUE)) %>%
ungroup() %>%
mutate(ORIGIN_STATE_ABR = fct_rev(ORIGIN_STATE_ABR)) %>%
ggplot(aes(x = stat, y = ORIGIN_STATE_ABR)) +
geom_tile(aes(fill = mean_value)) +
scale_fill_continuous(low = "green", high = "red")
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
read_csv("../global_ontime.csv") %>%
mutate(DISTANCE = DISTANCE / 100) %>%
gather(key = stat,
value = value,
-ORIGIN_STATE_ABR,
na.rm = TRUE) %>%
mutate(value = as.numeric(value)) %>%
group_by(ORIGIN_STATE_ABR, stat) %>%
summarise(mean_value = mean(value, na.rm = TRUE)) %>%
ungroup() %>%
mutate(ORIGIN_STATE_ABR = fct_rev(ORIGIN_STATE_ABR)) %>%
ggplot(aes(x = stat, y = ORIGIN_STATE_ABR)) +
geom_tile(aes(fill = mean_value)) +
scale_fill_continuous(low = "green", high = "red")
read_csv("../global_ontime.csv") %>%
mutate(DISTANCE = DISTANCE / 100) %>%
gather(key = stat,
value = value,
-ORIGIN_STATE_ABR,
na.rm = TRUE) %>%
mutate(value = as.numeric(value)) %>%
group_by(ORIGIN_STATE_ABR, stat) %>%
summarise(mean_value = mean(value, na.rm = TRUE)) %>%
mutate(ORIGIN_STATE_ABR = fct_rev(ORIGIN_STATE_ABR)) %>%
ggplot(aes(x = stat, y = ORIGIN_STATE_ABR)) +
geom_tile(aes(fill = mean_value)) +
scale_fill_continuous(low = "green", high = "red")
read_csv("../global_ontime.csv") %>%
mutate(DISTANCE = DISTANCE / 100) %>%
gather(key = stat,
value = value,
-ORIGIN_STATE_ABR,
na.rm = TRUE) %>%
mutate(value = as.numeric(value)) %>%
group_by(ORIGIN_STATE_ABR, stat) %>%
summarise(mean_value = mean(value, na.rm = TRUE)) %>%
ungroup() %>%
ggplot(aes(x = stat, y = ORIGIN_STATE_ABR)) +
geom_tile(aes(fill = mean_value)) +
scale_fill_continuous(low = "green", high = "red")
read_csv("../global_ontime.csv") %>%
mutate(DISTANCE = DISTANCE / 100) %>%
gather(key = stat,
value = value,
-ORIGIN_STATE_ABR,
na.rm = TRUE) %>%
mutate(value = as.numeric(value)) %>%
group_by(ORIGIN_STATE_ABR, stat) %>%
summarise(mean_value = mean(value, na.rm = TRUE)) %>%
ungroup() %>%
mutate(ORIGIN_STATE_ABR = fct_rev(ORIGIN_STATE_ABR)) %>%
ggplot(aes(x = stat, y = ORIGIN_STATE_ABR)) +
geom_tile(aes(fill = mean_value)) +
scale_fill_continuous(low = "green", high = "red")
read_csv("../global_ontime.csv") %>%
mutate(DISTANCE = DISTANCE / 100) %>%
gather(key = stat,
value = value,
-ORIGIN_STATE_ABR,
na.rm = TRUE) %>%
mutate(value = as.numeric(value)) %>%
group_by(ORIGIN_STATE_ABR, stat) %>%
summarise(mean_value = mean(value, na.rm = TRUE)) %>%
ungroup() %>%
ggplot(aes(x = stat, y = ORIGIN_STATE_ABR)) +
geom_tile(aes(fill = mean_value)) +
scale_fill_continuous(low = "green", high = "red")
setwd("~/Desktop/Exercise Files/02_05 tidyverse optimal")
# Complete run ------------------------------------------------------------
shakespeare.results <-
readLines("A_Midsummer_Nights_Dream.txt") %>%
as.tibble() %>%
mutate("speaker_name" = apply(X = ., MARGIN = 1, FUN = save.speaker)) %>%
mutate_all(str_trim) %>%
mutate(
value = apply(X=., MARGIN = 1, FUN = UC_These_names)
) %>%
filter(!str_detect(
value,
regex("(^ACT|^ENTER|^EXIT|^SCENE)", ignore_case = TRUE)))
library(checkpoint)
checkpoint("2017-12-15")
library(rlang)
library(tidyverse)
list.of.characters <- as.vector(readLines("characters.txt"))
saved.speaker <- " "
save.speaker <- function(evaluateThis) {
saved.speaker <<-switch( evaluateThis,
Exit = " ",
saved.speaker
)
if (evaluateThis %in% list.of.characters) {
saved.speaker <<- evaluateThis
}
saved.speaker
}
shakespeare.results <-
readLines("A_Midsummer_Nights_Dream.txt") %>%
as.tibble() %>%
mutate("speaker_name" = apply(X = ., MARGIN = 1, FUN = save.speaker)) %>%
mutate_all(str_trim)
find_characters_regex <- paste(list.of.characters, collapse = "|")
find_characters_regex <- paste0("(", find_characters_regex, ")")
UC_These_names <- function(lineText) {
str_replace_all(lineText["value"],
regex(find_characters_regex, ignore_case = TRUE),
toupper
)
}
shakespeare.results <- shakespeare.results %>%
mutate(
value = apply(X=., MARGIN = 1, FUN = UC_These_names)
)
shakespeare.results <- shakespeare.results %>%
filter(!str_detect(
value,
regex("(^ACT|^ENTER|^EXIT|^SCENE)", ignore_case = TRUE)))
# Complete run ------------------------------------------------------------
shakespeare.results <-
readLines("A_Midsummer_Nights_Dream.txt") %>%
as.tibble() %>%
mutate("speaker_name" = apply(X = ., MARGIN = 1, FUN = save.speaker)) %>%
mutate_all(str_trim) %>%
mutate(
value = apply(X=., MARGIN = 1, FUN = UC_These_names)
) %>%
filter(!str_detect(
value,
regex("(^ACT|^ENTER|^EXIT|^SCENE)", ignore_case = TRUE)))
View(shakespeare.results)
library(rlang)
library(tidyverse)
save.speaker <- function(evaluateThis) {
saved.speaker <<-switch( evaluateThis,
Exit = " ",
saved.speaker
)
if (evaluateThis %in% list.of.characters) {
saved.speaker <<- evaluateThis
}
saved.speaker
}
# Complete run ------------------------------------------------------------
shakespeare.results <-
readLines("A_Midsummer_Nights_Dream.txt") %>%
as.tibble() %>%
mutate("speaker_name" = apply(X = ., MARGIN = 1, FUN = save.speaker)) %>%
mutate_all(str_trim) %>%
mutate(
value = apply(X=., MARGIN = 1, FUN = UC_These_names)
) %>%
filter(!str_detect(
value,
regex("(^ACT|^ENTER|^EXIT|^SCENE)", ignore_case = TRUE)))
saved.speaker <- " "
# Complete run ------------------------------------------------------------
shakespeare.results <-
readLines("A_Midsummer_Nights_Dream.txt") %>%
as.tibble() %>%
mutate("speaker_name" = apply(X = ., MARGIN = 1, FUN = save.speaker)) %>%
mutate_all(str_trim) %>%
mutate(
value = apply(X=., MARGIN = 1, FUN = UC_These_names)
) %>%
filter(!str_detect(
value,
regex("(^ACT|^ENTER|^EXIT|^SCENE)", ignore_case = TRUE)))
save.speaker <- function(evaluateThis) {
saved.speaker <<-switch( evaluateThis,
Exit = " ",
saved.speaker
)
if (evaluateThis %in% list.of.characters) {
saved.speaker <<- evaluateThis
}
saved.speaker
}
# Complete run ------------------------------------------------------------
shakespeare.results <-
readLines("A_Midsummer_Nights_Dream.txt") %>%
as.tibble() %>%
mutate("speaker_name" = apply(X = ., MARGIN = 1, FUN = save.speaker)) %>%
mutate_all(str_trim) %>%
mutate(
value = apply(X=., MARGIN = 1, FUN = UC_These_names)
) %>%
filter(!str_detect(
value,
regex("(^ACT|^ENTER|^EXIT|^SCENE)", ignore_case = TRUE)))
list.of.characters <- as.vector(readLines("characters.txt"))
# Complete run ------------------------------------------------------------
shakespeare.results <-
readLines("A_Midsummer_Nights_Dream.txt") %>%
as.tibble() %>%
mutate("speaker_name" = apply(X = ., MARGIN = 1, FUN = save.speaker)) %>%
mutate_all(str_trim) %>%
mutate(
value = apply(X=., MARGIN = 1, FUN = UC_These_names)
) %>%
filter(!str_detect(
value,
regex("(^ACT|^ENTER|^EXIT|^SCENE)", ignore_case = TRUE)))
find_characters_regex <- paste0("(", find_characters_regex, ")")
UC_These_names <- function(lineText) {
str_replace_all(lineText["value"],
regex(find_characters_regex, ignore_case = TRUE),
toupper
)
}
# Complete run ------------------------------------------------------------
shakespeare.results <-
readLines("A_Midsummer_Nights_Dream.txt") %>%
as.tibble() %>%
mutate("speaker_name" = apply(X = ., MARGIN = 1, FUN = save.speaker)) %>%
mutate_all(str_trim) %>%
mutate(
value = apply(X=., MARGIN = 1, FUN = UC_These_names)
) %>%
filter(!str_detect(
value,
regex("(^ACT|^ENTER|^EXIT|^SCENE)", ignore_case = TRUE)))
find_characters_regex <- paste(list.of.characters, collapse = "|")
find_characters_regex <- paste0("(", find_characters_regex, ")")
# Complete run ------------------------------------------------------------
shakespeare.results <-
readLines("A_Midsummer_Nights_Dream.txt") %>%
as.tibble() %>%
mutate("speaker_name" = apply(X = ., MARGIN = 1, FUN = save.speaker)) %>%
mutate_all(str_trim) %>%
mutate(
value = apply(X=., MARGIN = 1, FUN = UC_These_names)
) %>%
filter(!str_detect(
value,
regex("(^ACT|^ENTER|^EXIT|^SCENE)", ignore_case = TRUE)))
View(shakespeare.results)
saved.speaker <- " "
# Complete run ------------------------------------------------------------
shakespeare.results <-
readLines("A_Midsummer_Nights_Dream.txt") %>%
as.tibble() %>%
mutate("speaker_name" = apply(X = ., MARGIN = 1, FUN = save.speaker)) %>%
mutate_all(str_trim) %>%
mutate(
value = apply(X=., MARGIN = 1, FUN = UC_These_names)
) %>%
filter(!str_detect(
value,
regex("(^ACT|^ENTER|^EXIT|^SCENE)", ignore_case = TRUE)))
# Complete run ------------------------------------------------------------
shakespeare.results <-
readLines("A_Midsummer_Nights_Dream.txt") %>%
as.tibble() %>%
mutate("speaker_name" = apply(X = ., MARGIN = 1, FUN = save.speaker)) %>%
mutate_all(str_trim) %>%
mutate(
value = apply(X=., MARGIN = 1, FUN = UC_These_names)
) %>%
filter(!str_detect(
value,
regex("(^ACT|^ENTER|^EXIT|^SCENE)", ignore_case = TRUE)))
View(shakespeare.results)
