SELECT avg(Accident_Severity) as Severity,label
FROM RoadSafetyData_Accidents_2015
LEFT JOIN RoadSafetyData_Vehicles_2015 ON RoadSafetyData_Accidents_2015.Accident_Index = RoadSafetyData_Vehicles_2015.Accident_Index
LEFT JOIN `Vehicle Type` ON cast(Vehicle_Type as REAL) LIKE `Vehicle Type`.code
WHERE Label LIKE '%otorcycle%'
GROUP BY label
ORDER BY Severity"
sqliteResult <- dbSendQuery(mySQLiteDB,do_this_sqlite)
dbSendQuery(mySQLiteDB,do_this_sqlite)
sqliteResult <- dbGetQuery(mySQLiteDB,do_this_sqlite)
View(sqliteResult)
sqliteResult <- dbSendQuery(mySQLiteDB,do_this_sqlite)
sqliteResult <- dbGetQuery(mySQLiteDB,do_this_sqlite)
sqliteResult <- dbGetQuery(mySQLiteDB,do_this_sqlite)
dbGetQuery(mySQLiteDB,do_this_sqlite)
#!/usr/bin/Rscript
# Copyright Mark Niemann-Ross, 2017
# Author: Mark Niemann-Ross. mark.niemannross@gmail.com
# Description: lynda.com, Database Clinic, SQLite, Problem 2
# import necessary libraries
list.of.packages <- c("readxl")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# SQLite support
library(DBI)
putSQLiteHere <- "myRsqlite.sqlite" # could also be ":memory:"
mySQLiteDB <- dbConnect(RSQLite::SQLite(),putSQLiteHere)
# add support for median
RSQLite::initExtension(db)
# ZIP import --------------------------------------------------------------
# this is a function to import zip files, unpack them, then load them into an sqlite db
importDataset <- function(getThisDataSet) {
completePathName <- paste0("http://data.dft.gov.uk/road-accidents-safety-data/",getThisDataSet,".zip")
mytempfile <- tempfile()
download.file(completePathName,mytempfile)
mydatafromcsv <- read.csv(unzip(mytempfile))
dbWriteTable(conn=mySQLiteDB,name = getThisDataSet,value=mydatafromcsv)
file.remove(mytempfile)
}
filestoget <- c("RoadSafetyData_Accidents_2015","RoadSafetyData_Vehicles_2015")
sapply(filestoget,importDataset)
# Excel import ------------------------------------------------------------
# import the sheets from the excel file
library(readxl)
url <- "http://data.dft.gov.uk/road-accidents-safety-data/Road-Accident-Safety-Data-Guide.xls"
destfile <- "Road_Accident_Safety_Data_Guide.xls"
download.file(url, destfile)
putTheseSheetsInSQLite <- function(sheetWeNeed) {
aSheetFromExcel <- read_excel(destfile,sheet=sheetWeNeed)
dbWriteTable(conn=mySQLiteDB,name = sheetWeNeed,value=aSheetFromExcel)
}
importTheseSheets <- c("Accident Severity","Vehicle Type")
sapply(importTheseSheets,putTheseSheetsInSQLite)
# Calculate ---------------------------------------------------------------
# Calculate the average accident severity for every type of motorcycle
#
do_this_sqlite <- "
SELECT median(Accident_Severity), avg(Accident_Severity) as Severity,label
FROM RoadSafetyData_Accidents_2015
LEFT JOIN RoadSafetyData_Vehicles_2015 ON RoadSafetyData_Accidents_2015.Accident_Index = RoadSafetyData_Vehicles_2015.Accident_Index
LEFT JOIN `Vehicle Type` ON cast(Vehicle_Type as REAL) LIKE `Vehicle Type`.code
WHERE Label LIKE '%otorcycle%'
GROUP BY label
ORDER BY Severity"
dbGetQuery(mySQLiteDB,do_this_sqlite)
dbDisconnect(mySQLiteDB)
#!/usr/bin/Rscript
# Copyright Mark Niemann-Ross, 2017
# Author: Mark Niemann-Ross. mark.niemannross@gmail.com
# Description: lynda.com, Database Clinic, SQLite, Problem 2
# import necessary libraries
list.of.packages <- c("readxl")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# SQLite support
library(DBI)
putSQLiteHere <- "myRsqlite.sqlite" # could also be ":memory:"
mySQLiteDB <- dbConnect(RSQLite::SQLite(),putSQLiteHere)
# add support for median
RSQLite::initExtension(dmySQLiteDB)
# ZIP import --------------------------------------------------------------
# this is a function to import zip files, unpack them, then load them into an sqlite db
importDataset <- function(getThisDataSet) {
completePathName <- paste0("http://data.dft.gov.uk/road-accidents-safety-data/",getThisDataSet,".zip")
mytempfile <- tempfile()
download.file(completePathName,mytempfile)
mydatafromcsv <- read.csv(unzip(mytempfile))
dbWriteTable(conn=mySQLiteDB,name = getThisDataSet,value=mydatafromcsv)
file.remove(mytempfile)
}
filestoget <- c("RoadSafetyData_Accidents_2015","RoadSafetyData_Vehicles_2015")
sapply(filestoget,importDataset)
# Excel import ------------------------------------------------------------
# import the sheets from the excel file
library(readxl)
url <- "http://data.dft.gov.uk/road-accidents-safety-data/Road-Accident-Safety-Data-Guide.xls"
destfile <- "Road_Accident_Safety_Data_Guide.xls"
download.file(url, destfile)
putTheseSheetsInSQLite <- function(sheetWeNeed) {
aSheetFromExcel <- read_excel(destfile,sheet=sheetWeNeed)
dbWriteTable(conn=mySQLiteDB,name = sheetWeNeed,value=aSheetFromExcel)
}
importTheseSheets <- c("Accident Severity","Vehicle Type")
sapply(importTheseSheets,putTheseSheetsInSQLite)
# Calculate ---------------------------------------------------------------
# Calculate the average accident severity for every type of motorcycle
#
do_this_sqlite <- "
SELECT median(Accident_Severity), avg(Accident_Severity) as Severity,label
FROM RoadSafetyData_Accidents_2015
LEFT JOIN RoadSafetyData_Vehicles_2015 ON RoadSafetyData_Accidents_2015.Accident_Index = RoadSafetyData_Vehicles_2015.Accident_Index
LEFT JOIN `Vehicle Type` ON cast(Vehicle_Type as REAL) LIKE `Vehicle Type`.code
WHERE Label LIKE '%otorcycle%'
GROUP BY label
ORDER BY Severity"
dbGetQuery(mySQLiteDB,do_this_sqlite)
dbDisconnect(mySQLiteDB)
#!/usr/bin/Rscript
# Copyright Mark Niemann-Ross, 2017
# Author: Mark Niemann-Ross. mark.niemannross@gmail.com
# Description: lynda.com, Database Clinic, SQLite, Problem 2
# import necessary libraries
list.of.packages <- c("readxl")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# SQLite support
library(DBI)
putSQLiteHere <- "myRsqlite.sqlite" # could also be ":memory:"
mySQLiteDB <- dbConnect(RSQLite::SQLite(),putSQLiteHere)
# add support for median
RSQLite::initExtension(mySQLiteDB)
# ZIP import --------------------------------------------------------------
# this is a function to import zip files, unpack them, then load them into an sqlite db
importDataset <- function(getThisDataSet) {
completePathName <- paste0("http://data.dft.gov.uk/road-accidents-safety-data/",getThisDataSet,".zip")
mytempfile <- tempfile()
download.file(completePathName,mytempfile)
mydatafromcsv <- read.csv(unzip(mytempfile))
dbWriteTable(conn=mySQLiteDB,name = getThisDataSet,value=mydatafromcsv)
file.remove(mytempfile)
}
filestoget <- c("RoadSafetyData_Accidents_2015","RoadSafetyData_Vehicles_2015")
sapply(filestoget,importDataset)
# Excel import ------------------------------------------------------------
# import the sheets from the excel file
library(readxl)
url <- "http://data.dft.gov.uk/road-accidents-safety-data/Road-Accident-Safety-Data-Guide.xls"
destfile <- "Road_Accident_Safety_Data_Guide.xls"
download.file(url, destfile)
putTheseSheetsInSQLite <- function(sheetWeNeed) {
aSheetFromExcel <- read_excel(destfile,sheet=sheetWeNeed)
dbWriteTable(conn=mySQLiteDB,name = sheetWeNeed,value=aSheetFromExcel)
}
importTheseSheets <- c("Accident Severity","Vehicle Type")
sapply(importTheseSheets,putTheseSheetsInSQLite)
# Calculate ---------------------------------------------------------------
# Calculate the average accident severity for every type of motorcycle
#
do_this_sqlite <- "
SELECT median(Accident_Severity), avg(Accident_Severity) as Severity,label
FROM RoadSafetyData_Accidents_2015
LEFT JOIN RoadSafetyData_Vehicles_2015 ON RoadSafetyData_Accidents_2015.Accident_Index = RoadSafetyData_Vehicles_2015.Accident_Index
LEFT JOIN `Vehicle Type` ON cast(Vehicle_Type as REAL) LIKE `Vehicle Type`.code
WHERE Label LIKE '%otorcycle%'
GROUP BY label
ORDER BY Severity"
dbGetQuery(mySQLiteDB,do_this_sqlite)
dbDisconnect(mySQLiteDB)
?create
??create
?devtools
install.packages(devtools)
install.packages("devtools")
?create
??create
library(devtools)
?create
lots.of.letters <- data.frame(LETTERS,letters,position=1:length(letters))
View(lots.of.letters)
lots.of.letters[3,]
lots.of.letters[,3]
lots.of.letters[,2]
lots.of.letters["letters"]
lots.of.letters[3:8,2:3]
lots.of.letters[lots.of.letters$position < 10,"letters"]
lots.of.letters[LETTERS=="R",]
lots.of.letters[LETTERS=="R" | LETTERS=="T",]
http://adv-r.had.co.nz/Subsetting.html
i.am.a.vector <- c("twas","brillig","and","the","slithey","toves")
i.am.a.matrix <- matrix(i.am.a.vector,nrow=2,ncol=3)
View(i.am.a.matrix)
i.am.a.longer.vector <- c(i.am.a.vector,c("did","gyre","and","gimble","in","wabe"))
i.am.a.longer.vector
i.am.an.array <- array(i.am.a.longer.vector,c(2,3,2))
i.am.an.array
i.am.an.array[2,3,2]
i.am.an.array
toupper
toupper(i.am.an.array[2,3,2])
i.am.an.array[2,3,2] <- toupper(i.am.an.array[2,3,2])
i.am.an.array
i.am.an.array[2,,2]
i.am.an.array[2,3,3]
i.am.an.array
my.row.names <- c("up","down")
my.column.names <- c("left","middle","right")
my.table.names <- c("behind","in front")
dimnames(i.am.an.array) <- list(my.row.names,my.column.names,my.table.names)
i.am.an.array
i.am.an.array["down","middle","in front"]
help.search(keyword = "character", package = "base")
load("~/OneDrive/R_DataSci - setup and start/Example Files/06_05_cluster_package/Untitled.RData")
?kmeans
# base R kmeans
mykmeansObject <- kmeans(myDataFrame, centers = 3)
# base R kmeans
mydfnostate <- myDataFrame[ , -c(1,5)]
mykmeansObject <- kmeans(mydfnostate, centers = 3)
mydfnostatenona <- mydfnostate[ complete.cases(mydfnostate)]
mydfnostatenona <- mydfnostate[ complete.cases()]
mydfnostatenona <- mydfnostate[ complete.cases(), ]
mydfnostatenona <- mydfnostate[ complete.cases(mydfnostate), ]
mykmeansObject <- kmeans(mydfnostatenona, centers = 3)
mykmeansObject
plot(mykmeansObject)
plot(mykmeansObject)
clusplot(mykmeansObject)
?cluster
library(cluster)
clusplot(mykmeansObject)
clusplot(mydfnostatenona, mykmeansObject$cluster)
plot(mykmeansObject)
plot(mykmeansObject, data=mydfnostatenona)
plot(mykmeansObject)
plot(mydfnostatenona, col = mykmeansObject$cluster)
# plotting the data set from above
clusplot(mydfnostatenona, mykmeansObject$cluster) # using cluster package
# simple demo of clara
myClaraObject <- clara(myDataFrame, k=3)
plot(myClaraObject)
# simple demo of clara
myClaraObject <- clara(mydfnostatenona, k=3)
plot(myClaraObject)
lots.of.letters <- data.frame(LETTERS,letters,position=1:length(letters))
lots.of.letters <- data.frame(LETTERS,letters,position=1:length(letters))
View(lots.of.letters)
lots.of.letters("LETTERS == R", "letters")
lots.of.letters["LETTERS == R", "letters"]
lots.of.letters[LETTERS == R, "letters"]
lots.of.letters[LETTERS == "R", "letters"]
LETTERS == "R"
lots.of.letters
LETTERS == "R"
lots.of.letters[LETTERS == "R", "letters"]
lots.of.letters["LETTERS == R"]
lots.of.letters["LETTERS == R", ]
lots.of.letters["LETTERS==R","letters"]
lots.of.letters[ LETTERS == R, "letters"]
lots.of.letters[ lots.of.letters$LETTERS == "R", "letters"]
lots.of.letters[ lots.of.letters$LETTERS == "R", ]
LETTERS
lots.of.letters[ lots.of.letters$LETTERS == "R", "letters"]
lots.of.letters$LETTERS == "R"
LETTERS == "R"
aMatrix <- matrix(2,4,6,7,5,3)
?matrix
aMatrix <- matrix(c(2,4,6,7,5,3), nrow = 2)
aMatrix
aMatrix
2 * aMatrix
n <- 100
beta <- 2.2
alpha <- 30
x <- seq(0, 1, length.out = n)
y_true <- beta * x + alpha
plot(x, y_true)
sigma <- 2.4
set.seed(42)
error <- rnorm(n, sd = sigma)
y_obs <- y_true + error
plot(x, y_obs)
lines(x, y_true)
hist(error)
ml <- lm(y_obs - x)
ml <- lm(y_obs ~ x)
coef(ml)
plot(ml, 1)
a = 7
x = c(3,4)
print(a,x)
print(c(a,x))
myfun <- function(a, x = data)
{
print(c(x, amount))
}
myfun
myfun(3, data.frame(3,4,5))
myfunc <- function(a, x = data)
{
print(c(x, a))
}
myfunc(3, data.frame(3,4,5))
myfunc(3,4)
myfunc(3, data.frame(3,5,7))
install.packages("tidyverse")
load(tidyverse)
library(tidyverse)
data.frame(3,5,7) %>% myfun()
data.frame(3,5,7) %>% myfunc()
firstThis <- function(x) {
tempList <- list(firstArg = x, lengthOf = length(x))
return(tempList)
}
myfunc <- function(x = data, a)
{
print(c(x, a))
}
"hello" %>%
firstThis %>%
myFunc
"hello" %>%
firstThis %>%
myfunc
"hello" %>%
firstThis %>%
myfunc
myfunc <- function(x = data, a = 7)
{
print(c(x, a))
}
"hello" %>%
firstThis %>%
myfunc
"hello" %>%
firstThis %>%
myfunc()
"hello" %>%
firstThis() %>%
myfunc()
myfunc <- function(x = data, a = 7)
{
print(x[7,])
}
myfunc(data.frame(3,4,5), 3)
myfunc <- function(x = data, a = 1)
{
print(x[7,])
}
myfunc <- function(x = data, a = 1)
{
print(x[a,])
}
myfunc(data.frame(3,4,5), 3)
myfunc <- function(x = data, a = 1)
{
print(x[ , a])
}
myfunc(data.frame(3,4,5), 3)
setwd("~/OneDrive/R_DataSci - setup and start/Example Files/02_01 understand the tidyverse")
myfunc <- function(a = 1, x = data)
{
print(x[ , a])
}
myfunc(3, data.frame(3,4,5))
myfunc <- function(x = data, a = 1)
{
print(x[ , a])
}
myfunc(data.frame(3,4,5), 3)
install.packages("tidyverse")
library(tidyverse)
data.frame(3,5,7) %>%
myfunc()
firstThis <- function(x) {
tempList <- list(firstArg = x, lengthOf = length(x))
return(tempList)
}
data.frame(3,5,7) %>%
firstThis() %>%
myfunc()
firstThis( data.frame(3,5,7) )
data.frame(3,5,7) %>%
firstThis() %>%
myfunc()
firstThis <- function(x) {
tempList <- data.frame(firstArg = x, lengthOf = length(x))
return(tempList)
}
data.frame(3,5,7) %>%
firstThis() %>%
myfunc()
# not tidy
notTidyCats <- data.frame(Panthera = c(avgWeight = 172, lifespan = 19))
View(notTidyCats)
# not tidy
notTidyCats <- data.frame(Panthera = c(avgWeight = "172 lbs", lifespan = 19),
Lynx = c(avgWeight = "15 kg", lifespan = 8),
Domestic = c(avgWeight = "8 pounds", lifespan = 15))
# tidy
tidyCats <- data.frame(c(species = "Panthera", attribute = "weight", value = 172),
c(species = "Panthera", attribute = "lifespan", value = 19),
c(species = "Lynx", attribute = "weight", value = 34),
c(species = "Lynx", attribute = "lifespan", value = 8),
c(species = "Domestic", attribute = "weight", value = 8),
c(species = "Domestic", attribute = "lifespan", value = 15)
)
View(tidyCats)
# tidy
tidyCats <- data.frame(Species = c("Panthera", "Lynx", "Domestic")
)
?tidyr
?spread
?gather
# tidy
tidyCats <- gather(notTidyCats, key = c("avgWeight", "lifespan"))
# tidy
tidyCats <- gather(notTidyCats)
# tidy
tidyCats <- gather(notTidyCats, avgWeight, lifespan)
# tidy
tidyCats %>% gather(avgWeight, lifespan)
# tidy
tidyCats <- tidyCats %>% gather(avgWeight, lifespan)
# tidy
tidyCats <- data.frame(c("Species", "Key", "Value"))
# tidy
tidyCats <- data.frame(Species = "Panthera", Key = "avgWeight", Value = 172)
?rbind
tidyCats <- rbind(Species = "Panthera", Key = "avgWeight", Value = 172)
tidyCats <- rbind(tidyCats, Species = "Panthera", Key = "avgWeight", Value = 172)
# tidy
tidyCats <- data.frame(Species = "Panthera", Key = "avgWeight", Value = 172)
tidyCats <- rbind(tidyCats, Species = "Panthera", Key = "avgWeight", Value = 172)
View(tidyCats)
# tidy
tidyCats <- data.frame(Species = "Panthera", Key = "avgWeight", Value = 172)
tidyCats <- cbind(tidyCats, Species = "Panthera", Key = "avgWeight", Value = 172)
# tidy
tidyCats <- data.frame(Species = "Panthera", Key = "avgWeight", Value = 172)
tidyCats <- rbind(tidyCats, Species = "Panthera", Key = "avgWeight", Value = 172)
m <- cbind(1, 1:7)
View(m)
m <- cbind(m, 8:14)[, c(1,3,2)]
# tidy
tidyCats <- data.frame(Species = "Panthera", Key = "avgWeight", Value = 172)
tidyCats <- rbind(tidyCats, Species = "Panthera", Key = "lifespan", Value = 19)
# tidy
tidyCats <- data.frame(Species = "Panthera", Key = "avgWeight", Value = 172)
tidyCats <- rbind(tidyCats, c(Species = "Panthera", Key = "lifespan", Value = 19))
# tidy
tidyCats <- data.frame(Species = "Panthera", Key = "avgWeight", Value = 172)
tidyCats <- rbind(tidyCats, c("Panthera", "lifespan",19))
# tidy
tidyCats <- data.frame(Species = "Panthera", Key = "avgWeight", Value = 172)
tidyCats <- rbind(tidyCats, data.frame("Panthera", "lifespan",19))
# tidy
tidyCats <- data.frame(Species = "Panthera", Key = "avgWeight", Value = 172)
tidyCats <- rbind(tidyCats, data.frame(Species = "Panthera", Key = "lifespan", Value = 19))
# not tidy
notTidyCats <- data.frame(Panthera = c(Weight = "172 lbs", lifespan = 19),
Lynx = c(Weight = "15 kg", lifespan = 8),
Domestic = c(Weight = "8 pounds", lifespan = 15))
# tidy
tidyCats <- data.frame(Species = "Panthera", Key = "Weight", Value = 172)
tidyCats <- rbind(tidyCats, data.frame(Species = "Panthera", Key = "lifespan", Value = 19))
tidyCats <- rbind(tidyCats, data.frame(Species = "Lynx", Key = "Weight", Value = 34))
tidyCats <- rbind(tidyCats, data.frame(Species = "Lynx", Key = "lifespan", Value = 8))
tidyCats <- rbind(tidyCats, data.frame(Species = "Domestic", Key = "Weight", Value = 8))
tidyCats <- rbind(tidyCats, data.frame(Species = "Domestic", Key = "lifespan", Value = 15))
# with tidy data, this code works...
mean(tidyCats[ Key == "Weight", ])
# with tidy data, this code works...
mean(tidyCats[ tidyCats$Key == "Weight", ])
# with tidy data, this code works...
mean(tidyCats[ tidyCats$Key == "Weight", Value])
# with tidy data, this code works...
mean(tidyCats[ tidyCats$Key == "Weight", tidyCats$Value])
# with tidy data, this code works...
mean(tidyCats[ tidyCats$Key == "Weight", tidyCats$Value])
# with tidy data, this code works...
tidyCats[ tidyCats$Key == "Weight", tidyCats$Value]
# with tidy data, this code works...
tidyCats[ tidyCats$Key == "Weight", ]
# with tidy data, this code works...
tidyCats[ tidyCats$Key == "Weight", Value]
# with tidy data, this code works...
tidyCats[ tidyCats$Key == "Weight", tidyCats$Value]
# with tidy data, this code works...
tidyCats[ tidyCats$Key == "Weight", 3]
# with tidy data, this code works...
tidyCats[ tidyCats$Key == "Weight", "Value"]
# with tidy data, this code works...
mean(tidyCats[ tidyCats$Key == "Weight", "Value"])
plot(tidyCats$Key == "Weight", tidyCats$Key == "Lifespan")
?plot
plot(tidyCats$Key)
plot(tidyCats$Key ~ tidyCats$Value)
plot(tidyCats[ tidyCats$Key == "Weight", "Value"],
tidyCats[ tidyCats$Key == "Lifespan", "Value"])
tidyCats[ tidyCats$Key == "Weight", "Value"]
tidyCats[ tidyCats$Key == "Lifespan", "Value"]
tidyCats[ tidyCats$Key == "Lifespan", "Value"]
tidyCats[ tidyCats$Key == "Lifespan", 3]
tidyCats[ tidyCats$Key == "Lifespan", ]
plot(tidyCats[ tidyCats$Key == "Weight", "Value"],
tidyCats[ tidyCats$Key == "lifespan", "Value"]
)
plot(tidyCats[ tidyCats$Key == "Weight", "Value"],
xlab = "Weight",
tidyCats[ tidyCats$Key == "lifespan", "Value"],
ylab = "lifespan"
)
