# not tidy
notTidyCats <- data.frame(Panthera = c(Weight = "172 lbs", lifespan = 19),
Lynx = c(Weight = "15 kg", lifespan = 8),
Domestic = c(Weight = "8 pounds", lifespan = 15))
# tidy
tidyCats <- data.frame(Species = "Panthera", Key = "Weight", Value = 172)
tidyCats <- rbind(tidyCats, data.frame(Species = "Panthera", Key = "lifespan", Value = 19))
tidyCats <- rbind(tidyCats, data.frame(Species = "Lynx", Key = "Weight", Value = 34))
tidyCats <- rbind(tidyCats, data.frame(Species = "Lynx", Key = "lifespan", Value = 8))
tidyCats <- rbind(tidyCats, data.frame(Species = "Domestic", Key = "Weight", Value = 8))
tidyCats <- rbind(tidyCats, data.frame(Species = "Domestic", Key = "lifespan", Value = 15))
View(notTidyCats)
View(tidyCats)
View(tidyCats)
View(notTidyCats)
View(tidyCats)
install.packages("tidyverse")
library(tidyverse)
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
install.packages("data.table")
library(data.table)
myDataTable <- fread("../40797218_T_ONTIME.csv")
myDataTable <- fread("../global_ontime.csv")
setwd("~/Desktop/Exercise Files/06_03_data_table_package")
myDataTable <- fread("../global_ontime.csv")
myDataFrame <- read.csv("../global_ontime.csv")
View(myDataFrame)
# select rows WHERE DISTANCE > 500 (demonstrates i)
normalDataFrameSyntax <- myDataFrame[ myDataFrame$DISTANCE > 500, ]
datatableSyntax <- myDataTable[ DISTANCE > 500 ] # no prefix. No comma
# return median DISTANCE where DISTANCE > 500 (demonstrates i & j )
# SQL equivalent would be SELECT median(DISTANCE) FROM data WHERE DISTANCE > 500
datatableSyntax <- myDataTable[ DISTANCE > 500, median(DISTANCE) ] # no prefix
normalDataFrameSyntax <- median(myDataFrame[ myDataFrame$DISTANCE > 500, "DISTANCE" ])
# Aggregate with data.table's "BY"
# find the median DISTANCE where DISTANCE > 500 for every state
datatableSyntax <- myDataTable[ DISTANCE > 500, median(DISTANCE), by = ORIGIN_STATE_ABR ] # no prefix
# base r requires two steps
normalDataFrameSyntax <- myDataFrame[ myDataFrame$DISTANCE > 500, ]
agg_dataFrame <- aggregate(x = normalDataFrameSyntax$DISTANCE,
by = list( normalDataFrameSyntax$ORIGIN_STATE_ABR),
FUN = median)
install.packages("data.table")
install.packages("data.table")
library(data.table)
myDataTable <- fread("../global_ontime.csv")
myDataFrame <- read.csv("../global_ontime.csv")
# select rows WHERE DISTANCE > 500 (demonstrates i)
normalDataFrameSyntax <- myDataFrame[ myDataFrame$DISTANCE > 500, ]
View(normalDataFrameSyntax)
datatableSyntax <- myDataTable[ DISTANCE > 500 ] # no prefix. No comma
# return median DISTANCE where DISTANCE > 500 (demonstrates i & j )
# SQL equivalent would be SELECT median(DISTANCE) FROM data WHERE DISTANCE > 500
datatableSyntax <- myDataTable[ DISTANCE > 500, median(DISTANCE) ] # no prefix
normalDataFrameSyntax <- median(myDataFrame[ myDataFrame$DISTANCE > 500, "DISTANCE" ])
# Aggregate with data.table's "BY"
# find the median DISTANCE where DISTANCE > 500 for every state
datatableSyntax <- myDataTable[ DISTANCE > 500, median(DISTANCE), by = ORIGIN_STATE_ABR ] # no prefix
View(datatableSyntax)
# base r requires two steps
normalDataFrameSyntax <- myDataFrame[ myDataFrame$DISTANCE > 500, ]
setwd("~/Desktop/Exercise Files/06_04_cluster_package")
myDataFrame <- read.csv("../global_ontime.csv")
# base R kmeans
mydfnostate <- myDataFrame[ , -c(1,5)]
mydfnostatenona <- mydfnostate[ complete.cases(mydfnostate), ]
mykmeansObject <- kmeans(mydfnostatenona, centers = 3)
# Base R plot
plot(mydfnostatenona, col = mykmeansObject$cluster)
myDataFrame <- read.csv("../global_ontime.csv")
# base R kmeans
mydfnostate <- myDataFrame[ , -c(1,5)]
mydfnostatenona <- mydfnostate[ complete.cases(mydfnostate), ]
mykmeansObject <- kmeans(mydfnostatenona, centers = 3)
# Base R plot
plot(mydfnostatenona, col = mykmeansObject$cluster)
library(cluster)
install.packages("cluster")
# plotting the data set from above
clusplot(mydfnostatenona, mykmeansObject$cluster) # using cluster package
install.packages("cluster")
library(cluster)
# plotting the data set from above
clusplot(mydfnostatenona, mykmeansObject$cluster) # using cluster package
# simple demo of clara
myClaraObject <- clara(mydfnostate, k=3)
plot(myClaraObject)
?cluster
mydfsampled <- sample(mydfnostatenona, 1000, replace = TRUE)
View(mydfsampled)
set.seed(42)
mydfindex <- sample(1:nrow(mydfnostatenona), 1000)
mydfsampled <- mydfnostatenona[mydfindex, ]
mykmeansObject <- kmeans(mydfsampled, centers = 3)
# Base R plot
plot(mydfnostatenona, col = mykmeansObject$cluster)
# Base R plot
plot(mydfsampled, col = mykmeansObject$cluster)
set.seed(42)
mydfindex <- sample(1:nrow(mydfnostatenona), 10000)
mydfsampled <- mydfnostatenona[mydfindex, ]
mykmeansObject <- kmeans(mydfsampled, centers = 3)
# Base R plot
plot(mydfsampled, col = mykmeansObject$cluster)
set.seed(42)
mydfindex <- sample(1:nrow(mydfnostatenona), 50000)
mydfsampled <- mydfnostatenona[mydfindex, ]
mykmeansObject <- kmeans(mydfsampled, centers = 3)
# Base R plot
plot(mydfsampled, col = mykmeansObject$cluster)
set.seed(42)
mydfindex <- sample(1:nrow(mydfnostatenona), 30000)
mydfsampled <- mydfnostatenona[mydfindex, ]
mykmeansObject <- kmeans(mydfsampled, centers = 3)
# Base R plot
plot(mydfsampled, col = mykmeansObject$cluster)
# plotting the data set from above
clusplot(mydfsampled, mykmeansObject$cluster) # using cluster package
# simple demo of clara
myClaraObject <- clara(mydfsampled, k=3)
plot(myClaraObject)
set.seed(42)
mydfindex <- sample(1:nrow(mydfnostatenona), 10000)
mydfsampled <- mydfnostatenona[mydfindex, ]
mykmeansObject <- kmeans(mydfsampled, centers = 3)
# Base R plot
plot(mydfsampled, col = mykmeansObject$cluster)
# plotting the data set from above
clusplot(mydfsampled, mykmeansObject$cluster) # using cluster package
set.seed(42)
mydfindex <- sample(1:nrow(mydfnostatenona), 5000)
mydfsampled <- mydfnostatenona[mydfindex, ]
mykmeansObject <- kmeans(mydfsampled, centers = 3)
# Base R plot
plot(mydfsampled, col = mykmeansObject$cluster)
# plotting the data set from above
clusplot(mydfsampled, mykmeansObject$cluster) # using cluster package
myDataFrame <- read.csv("../global_ontime.csv")
mydfnostate <- myDataFrame[ , -c(1,5)]
mydfnostatenona <- mydfnostate[ complete.cases(mydfnostate), ]
set.seed(42)
mydfindex <- sample(1:nrow(mydfnostatenona), 5000)
mydfsampled <- mydfnostatenona[mydfindex, ]
mykmeansObject <- kmeans(mydfsampled, centers = 3)
# Base R plot
plot(mydfsampled, col = mykmeansObject$cluster)
install.packages("cluster")
install.packages("cluster")
library(cluster)
# plotting the data set from above
clusplot(mydfsampled, mykmeansObject$cluster) # using cluster package
# simple demo of clara
myClaraObject <- clara(mydfsampled, k=3)
plot(myClaraObject)
