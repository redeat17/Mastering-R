# Setup -------------------------------------------------------------------
library(lubridate)
# Setup -------------------------------------------------------------------
install.packages("lubridate")
# Setup -------------------------------------------------------------------
# install.packages("lubridate")
library(lubridate)
HighVelSimTxt <- "../HighVelocitySimulation.txt" # set this to the pathname of the simulation file
collectOneSecond <- function() {
oneSecData <- data.frame("V1" = NA,
"V2" = NA,
"V3" = NA)
amountOfRunTime <- now() + seconds(1)
while (amountOfRunTime > now()) {
newData <- read.table(HighVelSimTxt)
oneSecData <- rbind(oneSecData, newData)
}
return(oneSecData)
}
oneSecondOfData <- collectOneSecond()
setwd("~/Desktop/Exercise Files/Chapter 01")
oneSecondOfData <- collectOneSecond()
# Process -----------------------------------------------------------------
# do something with the data
meanResult <- mean(oneSecondOfData$V3, na.rm = TRUE)
# Present -----------------------------------------------------------------
print(paste("The Arithmetic Mean of V3 is ", meanResult))
# Setup -------------------------------------------------------------------
# install.packages("lubridate")
library(lubridate)
HighVelSimTxt <- "../HighVelocitySimulation.txt" # set this to the pathname of the simulation file
collectOneSecond <- function() {
oneSecData <- data.frame("V1" = NA,
"V2" = NA,
"V3" = NA)
amountOfRunTime <- now() + seconds(1)
while (amountOfRunTime > now()) {
newData <- read.table(HighVelSimTxt)
oneSecData <- rbind(oneSecData, newData)
}
return(oneSecData)
}
oneSecondOfData <- collectOneSecond()
# Process -----------------------------------------------------------------
# do something with the data
meanResult <- mean(oneSecondOfData$V3, na.rm = TRUE)
# Present -----------------------------------------------------------------
print(paste("The Arithmetic Mean of V3 is ", meanResult))
setwd("~/Desktop/Exercise Files/Chapter 01")
# Setup -------------------------------------------------------------------
# install.packages("lubridate")
library(lubridate)
HighVelSimTxt <- "../HighVelocitySimulation.txt" # set this to the pathname of the simulation file
collectOneSecond <- function() {
oneSecData <- data.frame("V1" = NA,
"V2" = NA,
"V3" = NA)
amountOfRunTime <- now() + seconds(1)
while (amountOfRunTime > now()) {
newData <- read.table(HighVelSimTxt)
oneSecData <- rbind(oneSecData, newData)
}
return(oneSecData)
}
oneSecondOfData <- collectOneSecond()
View(oneSecondOfData)
# Process -----------------------------------------------------------------
# do something with the data
meanResult <- mean(oneSecondOfData$V3, na.rm = TRUE)
# Present -----------------------------------------------------------------
print(paste("The Arithmetic Mean of V3 is ", meanResult))
# Setup -------------------------------------------------------------------
library(DBI)
# Setup -------------------------------------------------------------------
install.packages("DBI", "RSQLite")
# Setup -------------------------------------------------------------------
install.packages("DBI")
install.packages("RSQLite")
library(DBI)
library(RSQLite)
mySQLiteDB <- dbConnect(RSQLite::SQLite(),
"AcquisitionDB.SQLite",
flags = SQLITE_RO)
# Process -----------------------------------------------------------------
doThisSQL <- " SELECT avg(V3), count(*) FROM 'Acquired Data' "
# Setup -------------------------------------------------------------------
# install.packages("DBI")
# install.packages("RSQLite")
library(DBI)
library(RSQLite)
mySQLiteDB <- dbConnect(RSQLite::SQLite(),
"AcquisitionDB.SQLite",
flags = SQLITE_RO)
# Process -----------------------------------------------------------------
doThisSQL <- " SELECT avg(V3), count(*) FROM 'Acquired Data' "
while (TRUE) {
dataRead <- dbGetQuery(mySQLiteDB, doThisSQL)
# Present -----------------------------------------------------------------
flush.console()
cat(sprintf("With %d observations, the mean of V3 is %.3f",
dataRead$`count(*)`,
dataRead$`avg(V3)`),
"\r"
)
Sys.sleep(3) # because SQLite doesn't handle concurrency very well
}
# import necessary libraries
list.of.packages <- c("DBI","RSQLite", "rjson")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if ( length(new.packages) ) install.packages(new.packages)
# SQLite support
library(DBI)
library(RSQLite)
library(rjson)
mySQLiteDB <- dbConnect(RSQLite::SQLite(), "AcquisitionDB.SQLite")
# processing --------------------------------------------------------------
doThisSQL <- " SELECT avg(V3), max(V1) FROM 'Acquired Data' "
dataRead <- dbGetQuery(mySQLiteDB, doThisSQL)
JSON_representation <- toJSON( dataRead )
write(JSON_representation, file = "meanOfV3.json")
doThisSQL <- " DELETE FROM 'Acquired Data' WHERE V3 < :maxRow "
myDBIResult <- dbSendQuery(mySQLiteDB, doThisSQL )
dbBind(myDBIResult, list( maxRow = dataRead[[2]] ) )
dbFetch(myDBIResult)
# import necessary libraries
list.of.packages <- c("DBI","RSQLite", "rjson")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if ( length(new.packages) ) install.packages(new.packages)
# SQLite support
library(DBI)
library(RSQLite)
library(rjson)
mySQLiteDB <- dbConnect(RSQLite::SQLite(), "AcquisitionDB.SQLite")
# processing --------------------------------------------------------------
doThisSQL <- " SELECT avg(V3), max(V1) FROM 'Acquired Data' "
while (TRUE) {
dataRead <- dbGetQuery(mySQLiteDB, doThisSQL)
JSON_representation <- toJSON( dataRead )
write(JSON_representation, file = "meanOfV3.json")
doThisSQL <- " DELETE FROM 'Acquired Data' WHERE V3 < :maxRow "
myDBIResult <- dbSendQuery(mySQLiteDB, doThisSQL )
dbBind(myDBIResult, list( maxRow = dataRead[[2]] ) )
}
while (TRUE) {
doThisSQL <- " SELECT avg(V3), max(V1) FROM 'Acquired Data' "
dataRead <- dbGetQuery(mySQLiteDB, doThisSQL)
JSON_representation <- toJSON( dataRead )
write(JSON_representation, file = "meanOfV3.json")
doThisSQL <- " DELETE FROM 'Acquired Data' WHERE V3 < :maxRow "
myDBIResult <- dbSendQuery(mySQLiteDB, doThisSQL )
dbBind(myDBIResult, list( maxRow = dataRead[[2]] ) )
}
while (TRUE) {
doThisSQL <- " SELECT avg(V3), max(V1) FROM 'Acquired Data' "
dataRead <- dbGetQuery(mySQLiteDB, doThisSQL)
JSON_representation <- toJSON( dataRead )
write(JSON_representation, file = "meanOfV3.json")
doThisSQL <- " DELETE FROM 'Acquired Data' WHERE V3 < :maxRow "
myDBIResult <- dbSendQuery(mySQLiteDB, doThisSQL )
dbBind(myDBIResult, list( maxRow = dataRead[[2]] ) )
Sys.sleep(3) #because SQLite doesn't handle concurrency well
}
library(rjson)
remove.packages("rjson")
setwd("~/Desktop/Exercise Files/Chapter 02")
setwd("~/Desktop/Exercise Files/Chapter 02")
HighVelSimTxt <- "HighVelocitySimulation.txt" # set this to the pathname of the simulation data
while (TRUE) {
if (file.exists(HighVelSimTxt)) {
Sys.sleep(1) # give the simulator time to finish writing
dataFromPolling <- read.table(HighVelSimTxt)
print(dataFromPolling)
file.remove(HighVelSimTxt)
}
}
